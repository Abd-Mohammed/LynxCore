{"version":3,"file":"src_app_pages_advanced-driver_advanced-driver_module_ts.js","mappings":"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","names":["i0","ctx_r19","oxw","ctx_r21","ctx_r54","$event","ctx_r57","ctx_r73","_r3","MAs","_r5","ctx_r81","ctx_r83","ctx_r85","ListViewComponent","constructor","apiService","session","this","field","dir","ScoreLevel","value","allData","bind","data","process","gridSummaryData","sort","ngOnInit","showDefaultFilters","defaultFilters","ngSelectedScoreLevel","push","filter","filters","map","d","e","logic","length","loadData","ngOnChanges","_simpleChanges","gridData","currentValue","i","grid","pageChange","pipe","debounceTime","subscribe","getDriverSummary","totalRecords","operator","driversGoodScore","Score","reduce","a","driversModerateScore","driversBadScore","driversNaScore","scoreLevelFilter","values","filterService","some","gridView","filterBy","orderBy","slice","skip","pageSize","total","event","sortChange","filterChange","handleToggleClick","multiselect","focus","toggle","showViolations","violationsList","violationsOverlay","show","getDataGridValues","isLoading","startDate","formatDate","locale","endDate","getDriverScoreCard","scoreCardId","tenantId","res","Data","exportToExcel","saveAsExcel","exportToPdf","saveAsPDF","selectors","ctx_r6","ctx_r8","DriverScoreHeaderComponent","EventEmitter","setActiveChip","chipNumber","activeChip","emit","setViewType","viewType","activeViewType","exportPdf","exportExcel","ctx","_r1","ChartViewComponent","document","createChart","createGrid","range","valueAxis","axisRanges","create","label","text","am4core","am4themes_animated","am4themes_dark","config","chart","am4charts","responsive","enabled","categoryAxis","xAxes","dataFields","category","id","renderer","template","location","minGridDistance","yAxes","labels","adapter","add","dataItem","min","max","disabled","fill","truncate","maxWidth","series","valueY","categoryX","customValue","name","columns","tooltipText","fillOpacity","labelBullet","bullets","locationY","stacked","legendSettings","itemValueText","calculatePercent","stroke","target","element","hidden","visible","events","on","ev","getSelected","dataContext","columnTemplate","strokeWidth","strokeOpacity","options","exporting","getFormatOptions","keepTainted","setFormatOptions","getElementById","onclick","filePrefix","export","m","getElementsByClassName","classList","setAttribute","DOCUMENT","ctx_r17","_r11","_r13","DriverInfoCardComponent","ctx_r13","ctx_r14","ctx_r15","ctx_r26","ctx_r35","ctx_r37","ctx_r39","ctx_r40","ctx_r41","routes","path","component","display","Date","type","themeColor","size","currentTenant","selectedTenant","getScoreCardList","getTenantsSettings","tenantChange","tenantSelectionChange","_event","parent","child","parentRect","getBoundingClientRect","parentViewableArea","clientHeight","childRect","top","bottom","scrollTop","scrollBot","Math","abs","scrollParentToChild","getTenants","tenantsList","Tenants","Name","TenantId","CurrentTenant","tenantsLoading","selectedDriver","t","driverSort","getHighestValues","getLowestValues","loading","selectedCard","Total","sortedData","b","parseFloat","driverScorecardList","virtualDriverScorecardList","getScoreMetrics","getScorecardById","scoreMetricList","Metrics","highestScorecardList","chartData","DriverName","DriverId","staffId","DriverStaffId","lowestScorecardList","scoreCardsTabs","getScorecards","Id","active","setActivetab","tab","forEach","find","getSelectedDriver","submitDate","listviewComponent","AdvancedDriverComponent","slideInOutAnimation","AdvancedDriverRoutingModule","RouterModule","KENDO_COMPONENTS","IntlModule","LabelModule","DateInputsModule","GridModule","PDFModule","ExcelModule","InputsModule","ButtonsModule","DropDownsModule","IconsModule","IndicatorsModule","MultiSelectModule","FormsModule","AdvancedDriverModule","CommonModule","NgxSkeletonLoaderModule","OverlayPanelModule","TooltipModule","SvgIconsModule","DropdownModule"],"sourceRoot":"webpack:///","sources":["./src/app/pages/advanced-driver/components/list-view/list-view.component.html","./src/app/pages/advanced-driver/components/list-view/list-view.component.ts","./src/app/pages/advanced-driver/components/driver-score-header/driver-score-header.component.html","./src/app/pages/advanced-driver/components/driver-score-header/driver-score-header.component.ts","./src/app/pages/advanced-driver/components/chart-view/chart-view.component.ts","./src/app/pages/advanced-driver/components/chart-view/chart-view.component.html","./src/app/pages/advanced-driver/components/driver-info-card/driver-info-card.component.html","./src/app/pages/advanced-driver/components/driver-info-card/driver-info-card.component.ts","./src/app/pages/advanced-driver/view/advanced-driver.component.html","./src/app/pages/advanced-driver/advanced-driver-routing.module.ts","./src/app/pages/advanced-driver/view/advanced-driver.component.ts","./src/app/pages/advanced-driver/advanced-driver.module.ts"],"sourcesContent":["<ng-container *ngIf=\"isLoading; else defaultView\">\r\n  <div style=\"padding: 10px\">\r\n    <ngx-skeleton-loader\r\n      count=\"6\"\r\n      animation=\"progress-dark\"\r\n      [theme]=\"{\r\n        'height.px': 40,\r\n        'z-index': 1,\r\n        'background-color': '#31363e',\r\n        'border-radius': '6px'\r\n      }\"\r\n    ></ngx-skeleton-loader>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #defaultView>\r\n  <div class=\"flex justify-between\" *ngIf=\"showHeader\">\r\n    <div class=\"driver-summary\">\r\n      <p>\r\n        <app-circle-icon [fillColor]=\"'#09a709'\" [scale]=\"'large'\"> </app-circle-icon>\r\n        [[[[Good score]]]]:\r\n        <span> {{ driversGoodScore }} [[[[drivers]]]] </span>\r\n      </p>\r\n      <p>\r\n        <app-circle-icon [fillColor]=\"'#ffc400'\" [scale]=\"'large'\"> </app-circle-icon>\r\n        [[[[Moderate score]]]]:\r\n        <span> {{ driversModerateScore }} [[[[drivers]]]] </span>\r\n      </p>\r\n      <p>\r\n        <app-circle-icon [fillColor]=\"'#d20404'\" [scale]=\"'large'\"> </app-circle-icon>\r\n        [[[[Bad score]]]]:\r\n        <span> {{ driversBadScore }} [[[[drivers]]]] </span>\r\n      </p>\r\n      <p>\r\n        <app-circle-icon [fillColor]=\"'#6a6a6a'\" [scale]=\"'large'\"> </app-circle-icon>\r\n        [[[[N/A]]]]:\r\n        <span> {{ driversNaScore }} [[[[drivers]]]] </span>\r\n      </p>\r\n    </div>\r\n\r\n    <div class=\"buttons-slider-container\">\r\n      <a class=\"grid_icon_btn-export tooltips\" data-original-title=\"[[[Export]]]]\"><span></span></a>\r\n\r\n      <div class=\"f-right buttons-slider\">\r\n        <a class=\"grid_icon_btn-sm-pdf\" (click)=\"exportToPdf(grid)\"><span></span></a>\r\n        <a class=\"grid_icon_btn-sm-excl\" (click)=\"exportToExcel(grid)\"><span></span></a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!--    -->\r\n  <kendo-grid\r\n    #grid\r\n    [kendoGridBinding]=\"gridData\"\r\n    [height]=\"450\"\r\n    [skip]=\"skip\"\r\n    [pageSize]=\"pageSize\"\r\n    [sort]=\"sort\"\r\n    [sortable]=\"true\"\r\n    scrollable=\"virtual\"\r\n    [rowHeight]=\"36\"\r\n    (sortChange)=\"sortChange($event)\"\r\n    [filter]=\"filter\"\r\n    filterable=\"menu\"\r\n    (filterChange)=\"filterChange($event)\"\r\n  >\r\n    <kendo-grid-column field=\"DriverName\" title=\"[[[[Driver Name]]]]\" [width]=\"250\" [sortable]=\"true\">\r\n      <ng-template\r\n        kendoGridFilterMenuTemplate\r\n        let-column=\"column\"\r\n        let-filter=\"filter\"\r\n        let-filterService=\"filterService\"\r\n      >\r\n        <kendo-grid-string-filter-menu\r\n          [column]=\"column\"\r\n          [filter]=\"filter\"\r\n          [filterService]=\"filterService\"\r\n          [extra]=\"false\"\r\n        >\r\n        </kendo-grid-string-filter-menu>\r\n      </ng-template>\r\n\r\n      <ng-template kendoGridCellTemplate let-dataItem>\r\n        <div [ngSwitch]=\"true\" class=\"driver-name\" [pTooltip]=\"dataItem.DriverName\">\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Good'\">\r\n            <app-circle-icon [fillColor]=\"'#09a709'\" [scale]=\"'small'\"> </app-circle-icon>\r\n            {{ dataItem.DriverName }}\r\n          </div>\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Moderate'\">\r\n            <app-circle-icon [fillColor]=\"'#ffc400'\" [scale]=\"'small'\"> </app-circle-icon>\r\n            {{ dataItem.DriverName }}\r\n          </div>\r\n\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Bad'\">\r\n            <app-circle-icon [fillColor]=\"'#d20404'\" [scale]=\"'small'\"> </app-circle-icon>\r\n            {{ dataItem.DriverName }}\r\n          </div>\r\n\r\n          <div *ngSwitchDefault>\r\n            <app-circle-icon [fillColor]=\"'#6a6a6a'\" [scale]=\"'small'\"> </app-circle-icon>\r\n            {{ dataItem.DriverName }}\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-column field=\"DriverStaffId\" title=\"[[[[Staff ID]]]]\" [width]=\"150\" [sortable]=\"true\">\r\n      <ng-template\r\n        kendoGridFilterMenuTemplate\r\n        let-column=\"column\"\r\n        let-filter=\"filter\"\r\n        let-filterService=\"filterService\"\r\n      >\r\n        <kendo-grid-string-filter-menu\r\n          [column]=\"column\"\r\n          [filter]=\"filter\"\r\n          [filterService]=\"filterService\"\r\n          [extra]=\"false\"\r\n        >\r\n        </kendo-grid-string-filter-menu>\r\n      </ng-template>\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-column field=\"PermitId\" title=\"[[[[Permit ID]]]]\" [width]=\"120\" [sortable]=\"true\">\r\n      <ng-template\r\n        kendoGridFilterMenuTemplate\r\n        let-column=\"column\"\r\n        let-filter=\"filter\"\r\n        let-filterService=\"filterService\"\r\n      >\r\n        <kendo-grid-string-filter-menu\r\n          [column]=\"column\"\r\n          [filter]=\"filter\"\r\n          [filterService]=\"filterService\"\r\n          [extra]=\"false\"\r\n        >\r\n        </kendo-grid-string-filter-menu>\r\n      </ng-template>\r\n      <ng-template kendoGridCellTemplate let-dataItem>\r\n        {{ dataItem.PermitId ?? '- - -' }}\r\n      </ng-template>\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-column field=\"Score\" title=\"[[[[Score]]]]\" [width]=\"100\" [sortable]=\"true\" [filterable]=\"false\">\r\n      <ng-template kendoGridCellTemplate let-dataItem>\r\n        <div [ngSwitch]=\"true\">\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Good'\">\r\n            <span style=\"color: #09a709\"> {{ dataItem.Score }}% </span>\r\n          </div>\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Moderate'\">\r\n            <span style=\"color: #ffc400\"> {{ dataItem.Score }}% </span>\r\n          </div>\r\n\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Bad'\">\r\n            <span style=\"color: #d20404\"> {{ dataItem.Score }}% </span>\r\n          </div>\r\n          <div *ngSwitchDefault>\r\n            <span style=\"color: #6a6a6a\"> {{ dataItem.ScoreLevel }} </span>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-column field=\"ScoreLevel\" title=\"[[[[Score level]]]]\" [width]=\"150\" [sortable]=\"true\">\r\n      <ng-template\r\n        kendoGridFilterMenuTemplate\r\n        let-column=\"column\"\r\n        let-filter=\"filter\"\r\n        let-filterService=\"filterService\"\r\n      >\r\n        <span class=\"multiselect-container\">\r\n          <kendo-multiselect\r\n            #kendoMultiSelect\r\n            style=\"width: 220px\"\r\n            [data]=\"scoreLevels\"\r\n            textField=\"ScoreLevel\"\r\n            valueField=\"value\"\r\n            [value]=\"ngSelectedScoreLevel\"\r\n            [valuePrimitive]=\"true\"\r\n            [clearButton]=\"false\"\r\n            (valueChange)=\"scoreLevelFilter($event, filterService)\"\r\n            placeholder=\"Select...\"\r\n          >\r\n          </kendo-multiselect>\r\n          <span\r\n            class=\"toggle-icon k-icon k-i-arrow-chevron-down\"\r\n            (mousedown)=\"$event.preventDefault()\"\r\n            (click)=\"handleToggleClick(kendoMultiSelect)\"\r\n          >\r\n          </span>\r\n        </span>\r\n      </ng-template>\r\n\r\n      <ng-template kendoGridCellTemplate let-dataItem>\r\n        <div [ngSwitch]=\"true\">\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Good'\">\r\n            <span style=\"color: #09a709\"> {{ dataItem.ScoreLevel }} </span>\r\n          </div>\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Moderate'\">\r\n            <span style=\"color: #ffc400\"> {{ dataItem.ScoreLevel }} </span>\r\n          </div>\r\n\r\n          <div *ngSwitchCase=\"dataItem.ScoreLevel === 'Bad'\">\r\n            <span style=\"color: #d20404\"> {{ dataItem.ScoreLevel }} </span>\r\n          </div>\r\n          <div *ngSwitchDefault>\r\n            <span style=\"color: #6a6a6a\"> {{ dataItem.ScoreLevel }} </span>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-column\r\n      field=\"Distance\"\r\n      title=\"[[[[Distance(km)]]]]\"\r\n      [width]=\"150\"\r\n      [sortable]=\"true\"\r\n      [filterable]=\"false\"\r\n    >\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-column\r\n      field=\"TransportTime\"\r\n      title=\"[[[[Duty time]]]]\"\r\n      [width]=\"150\"\r\n      [sortable]=\"true\"\r\n      [filterable]=\"false\"\r\n    >\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-column\r\n    field=\"CostImplication\"\r\n    title=\"[[[[Cost Implication]]]]\"\r\n    [width]=\"150\"\r\n    [sortable]=\"true\"\r\n    [filterable]=\"false\"\r\n  >\r\n  </kendo-grid-column>\r\n\r\n    <kendo-grid-column\r\n      field=\"WeightedScoreKeyValue\"\r\n      title=\"[[[[Violations]]]]\"\r\n      [width]=\"300\"\r\n      [sortable]=\"true\"\r\n      [filterable]=\"false\"\r\n    >\r\n      <ng-template kendoGridCellTemplate let-dataItem>\r\n        <div class=\"violation-col\">\r\n          <p style=\"flex-direction: column\">\r\n            <ng-container *ngIf=\"dataItem.WeightedScoreKeyValue.length > 0; else emptyViolation\">\r\n              <span class=\"violation\">\r\n                <span\r\n                  *ngFor=\"let violation of dataItem.WeightedScoreKeyValue\"\r\n                  (mousemove)=\"showViolations($event, dataItem.WeightedScoreKeyValue)\"\r\n                  (mouseout)=\"violationsOverlay.hide()\"\r\n                  [ngStyle]=\"{ 'background-color': violation.Color }\"\r\n                  [style.width.%]=\"violation.Percentage < 5 ? 6 : violation.Percentage\"\r\n                >\r\n                  {{ violation?.Count }}\r\n                </span>\r\n              </span>\r\n            </ng-container>\r\n            <ng-template #emptyViolation>\r\n              <span\r\n                (mouseout)=\"emptyViolationsOverlay.hide()\"\r\n                (mouseenter)=\"emptyViolationsOverlay.show($event)\"\r\n                class=\"empty-violation\"\r\n              ></span>\r\n            </ng-template>\r\n          </p>\r\n        </div>\r\n      </ng-template>\r\n    </kendo-grid-column>\r\n\r\n    <kendo-grid-pdf fileName=\"driver-scorecard.pdf\" [repeatHeaders]=\"true\" [allPages]=\"true\" [delay]=\"1000\">\r\n    </kendo-grid-pdf>\r\n\r\n    <kendo-grid-excel fileName=\"driver-scorecard.xlsx\" [fetchData]=\"allData\" [filterable]=\"true\">\r\n      <kendo-excelexport-column field=\"DriverName\" title=\"Driver Name\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"DriverStaffId\" title=\"Staff ID\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"PermitId\" title=\"Permit ID\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"Score\" title=\"Score\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"ScoreLevel\" title=\"Score level\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"Distance\" title=\"Distance(km)\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"TransportTime\" title=\"Duty time\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"CostImplication\" title=\"Cost Implication\"> </kendo-excelexport-column>\r\n      <kendo-excelexport-column field=\"Violations\" title=\"Violations\"></kendo-excelexport-column>\r\n    </kendo-grid-excel>\r\n  </kendo-grid>\r\n\r\n  <div class=\"grid-footer\" *ngIf=\"showRefresh\">\r\n    <div class=\"redo-btn\">\r\n      <button class=\"btn btn-sm\" (click)=\"getDataGridValues()\">\r\n        <i class=\"fas fa-redo\"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<p-overlayPanel #violationsOverlay [autoZIndex]=\"true\" styleClass=\"violation-info-window\">\r\n  <ng-template pTemplate>\r\n    <div class=\"card bg-transparent\">\r\n      <div class=\"card-body\">\r\n        <div *ngFor=\"let violation of violationsList\">\r\n          <div>\r\n            <span class=\"circle\" [ngStyle]=\"{ 'background-color': violation.Color }\"> </span>\r\n            <span style=\"margin-right: 1em\">\r\n              {{ violation.Name }}\r\n            </span>\r\n          </div>\r\n          <div style=\"align-self: end\">\r\n            {{ violation.Count }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</p-overlayPanel>\r\n\r\n<p-overlayPanel #emptyViolationsOverlay [autoZIndex]=\"true\" styleClass=\"violation-info-window\">\r\n  <ng-template pTemplate>\r\n    <div class=\"card bg-transparent\">\r\n      <div class=\"card-body\">\r\n        <div>\r\n          <div>\r\n            <span class=\"circle\" style=\"background-color: #6a6a6a\"> </span>\r\n            <span> [[[[Driver has 0 violations]]]] </span>\r\n          </div>\r\n          <div style=\"align-self: end\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</p-overlayPanel>\r\n","/* eslint-disable @typescript-eslint/consistent-type-imports */\r\nimport { formatDate } from '@angular/common';\r\nimport type { OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport type { MultiSelectComponent } from '@progress/kendo-angular-dropdowns';\r\nimport type { ExcelExportData } from '@progress/kendo-angular-excel-export';\r\nimport type { FilterService, GridComponent, GridDataResult, PageChangeEvent } from '@progress/kendo-angular-grid';\r\nimport type { CompositeFilterDescriptor, SortDescriptor } from '@progress/kendo-data-query';\r\nimport { filterBy, orderBy, process } from '@progress/kendo-data-query';\r\nimport type { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { SessionService } from 'src/app/shared/services/session-service/session.service';\r\nimport { AdvancedDriverService } from '../../services/advanced-driver.service';\r\nimport type { Driver } from './../../interfaces/driver.interface';\r\n\r\n@Component({\r\n  selector: 'app-list-view',\r\n  templateUrl: './list-view.component.html',\r\n  styleUrls: ['./list-view.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ListViewComponent implements OnChanges, OnInit {\r\n  @ViewChild('violationsOverlay') violationsOverlay!: OverlayPanel;\r\n\r\n  @ViewChild('grid') public grid!: GridComponent;\r\n\r\n  @Input() startDate: any;\r\n  @Input() endDate: any;\r\n  @Input() scoreCardId!: number;\r\n  @Input() tenantId: number;\r\n  public violationsList: any = [];\r\n  @Input() isLoading = true;\r\n  @Input() gridData: Driver[] = [];\r\n  @Input() totalRecords = 0;\r\n  public gridView!: GridDataResult;\r\n  @Input() showHeader = true;\r\n  @Input() showRefresh = true;\r\n  public pageSize = 100;\r\n  private gridSummaryData: any = [];\r\n  public skip = 0;\r\n  @Input() public sort: SortDescriptor[] = [\r\n    {\r\n      field: 'DriverStaffId',\r\n      dir: 'asc',\r\n    },\r\n  ];\r\n  @Input() showDefaultFilters = true;\r\n  public filter!: CompositeFilterDescriptor;\r\n  public driversGoodScore: any = null;\r\n  public driversModerateScore: any = null;\r\n  public driversBadScore: any = null;\r\n  public driversNaScore: any = null;\r\n  @Input() public scoreLevels = [\r\n    {\r\n      ScoreLevel: '[[[[All]]]]',\r\n      value: 'All',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[Has Score]]]]',\r\n      value: 'Has Score',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[No Score]]]]',\r\n      value: 'N/a',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[Good]]]]',\r\n      value: 'Good',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[Moderate]]]]',\r\n      value: 'Moderate',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[Bad]]]]',\r\n      value: 'Bad',\r\n    },\r\n  ];\r\n  public ngSelectedScoreLevel: any = [];\r\n\r\n  constructor(private apiService: AdvancedDriverService, private session: SessionService) {\r\n    this.allData = this.allData.bind(this);\r\n  }\r\n\r\n  public allData(): ExcelExportData {\r\n    const result: ExcelExportData = {\r\n      data: process(this.gridSummaryData, {\r\n        sort: this.sort,\r\n      }).data,\r\n    };\r\n    return result;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.showDefaultFilters) {\r\n      this.defaultFilters();\r\n    } else {\r\n      this.ngSelectedScoreLevel.push('All');\r\n      const filter = {\r\n        filters: this.filter.filters\r\n          .map((d: any) => ({\r\n            filters: d.filters.filter((e: any) => e.field != 'ScoreLevel'),\r\n            logic: 'and',\r\n          }))\r\n          .filter((e) => e.filters.length > 0),\r\n        logic: 'and',\r\n      };\r\n\r\n      this.loadData(filter);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(_simpleChanges: SimpleChanges) {\r\n    if (_simpleChanges.gridData && _simpleChanges.gridData.currentValue) {\r\n      this.gridData = _simpleChanges.gridData.currentValue;\r\n      this.grid?.pageChange.pipe(debounceTime(500)).subscribe((e) => this.pageChange(e));\r\n      this.gridSummaryData = _simpleChanges.gridData.currentValue;\r\n      this.getDriverSummary();\r\n\r\n      if (_simpleChanges.totalRecords && _simpleChanges.totalRecords.currentValue) {\r\n        this.totalRecords = _simpleChanges.totalRecords.currentValue;\r\n      }\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  private defaultFilters() {\r\n    this.ngSelectedScoreLevel.push('Has Score');\r\n    this.filter = {\r\n      filters: [\r\n        {\r\n          filters: this.ngSelectedScoreLevel.map((value: any) => ({\r\n            field: 'ScoreLevel',\r\n            operator: value == 'Has Score' ? 'neq' : 'eq',\r\n            value: value == 'Has Score' ? 'N/a' : value,\r\n          })),\r\n          logic: 'or',\r\n        },\r\n      ],\r\n      logic: 'and',\r\n    };\r\n  }\r\n\r\n  private getDriverSummary() {\r\n    this.driversGoodScore = this.gridSummaryData\r\n      .filter((e: any) => e.ScoreLevel == 'Good')\r\n      .map((e: any) => e.Score)\r\n      .reduce((a: string | any[], e: any, i: number) => {\r\n        return a.length > 0 ? [...a, e + a[i - 1]] : [e];\r\n      }, []).length;\r\n\r\n    this.driversModerateScore = this.gridSummaryData\r\n      .filter((e: any) => e.ScoreLevel == 'Moderate')\r\n      .map((e: any) => e.Score)\r\n      .reduce((a: string | any[], e: any, i: number) => {\r\n        return a.length > 0 ? [...a, e + a[i - 1]] : [e];\r\n      }, []).length;\r\n\r\n    this.driversBadScore = this.gridSummaryData\r\n      .filter((e: any) => e.ScoreLevel == 'Bad')\r\n      .map((e: any) => e.Score)\r\n      .reduce((a: string | any[], e: any, i: number) => {\r\n        return a.length > 0 ? [...a, e + a[i - 1]] : [e];\r\n      }, []).length;\r\n\r\n    this.driversNaScore = this.gridSummaryData\r\n      .filter((e: any) => e.ScoreLevel == 'N/A')\r\n      .map((e: any) => e.Score)\r\n      .reduce((a: string | any[], e: any, i: number) => {\r\n        return a.length > 0 ? [...a, e + a[i - 1]] : [e];\r\n      }, []).length;\r\n  }\r\n\r\n  public scoreLevelFilter(values: any, filterService: FilterService): void {\r\n    this.ngSelectedScoreLevel = values;\r\n    const allFilterExists = values.some((e: string) => e == 'All');\r\n    if (allFilterExists) {\r\n      const filter = {\r\n        filters: this.filter.filters\r\n          .map((d: any) => ({\r\n            filters: d.filters.filter((e: any) => e.field != 'ScoreLevel'),\r\n            logic: 'and',\r\n          }))\r\n          .filter((e) => e.filters.length > 0),\r\n        logic: 'and',\r\n      };\r\n\r\n      this.loadData(filter);\r\n    } else {\r\n      filterService.filter({\r\n        filters: values.map((value: any) => ({\r\n          field: 'ScoreLevel',\r\n          operator: value == 'Has Score' ? 'neq' : 'eq',\r\n          value: value == 'Has Score' ? 'N/a' : value,\r\n        })),\r\n        logic: 'and',\r\n      });\r\n    }\r\n  }\r\n\r\n  private loadData(filter?: any): void {\r\n    if (filter) {\r\n      this.filter = filter;\r\n    }\r\n    this.gridView = {\r\n      data: filterBy(orderBy(this.gridData.slice(this.skip, this.skip + this.pageSize), this.sort), this.filter),\r\n      total: this.totalRecords,\r\n    };\r\n  }\r\n\r\n  public pageChange(event: PageChangeEvent): void {\r\n    this.skip = event.skip;\r\n    this.loadData();\r\n  }\r\n\r\n  public sortChange(sort: SortDescriptor[]): void {\r\n    this.sort = sort;\r\n    this.loadData();\r\n  }\r\n\r\n  public filterChange(filter: CompositeFilterDescriptor): void {\r\n    if (filter.filters.length == 0) {\r\n      this.ngSelectedScoreLevel = ['All'];\r\n    }\r\n    this.loadData(filter);\r\n  }\r\n\r\n  public handleToggleClick(multiselect: MultiSelectComponent): void {\r\n    multiselect.focus();\r\n    multiselect.toggle();\r\n  }\r\n\r\n  public showViolations(event: any, violationsList: any) {\r\n    this.violationsList = violationsList;\r\n    this.violationsOverlay.show(event);\r\n  }\r\n\r\n  public getDataGridValues() {\r\n    this.isLoading = true;\r\n    const startDate = formatDate(this.startDate.value, 'dd/MM/yyyy', this.session.locale),\r\n      endDate = formatDate(this.endDate.value, 'dd/MM/yyyy', this.session.locale);\r\n\r\n    this.apiService.getDriverScoreCard(this.scoreCardId, startDate, endDate, this.tenantId).subscribe((res: any) => {\r\n      this.isLoading = false;\r\n      this.gridData = res.Data;\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  public exportToExcel(grid: GridComponent): void {\r\n    grid.saveAsExcel();\r\n  }\r\n\r\n  public exportToPdf(grid: GridComponent): void {\r\n    grid.saveAsPDF();\r\n  }\r\n}\r\n","<div class=\"score-card-header\">\r\n  <div class=\"chips\">\r\n    <label [ngClass]=\"{ active: activeShip === 1 }\" (click)=\"setActiveChip(1)\"> 10 [[[[Highest Scores]]]] </label>\r\n    <label [ngClass]=\"{ active: activeShip === 2 }\" (click)=\"setActiveChip(2)\"> 10 [[[[Lowest Scores]]]] </label>\r\n  </div>\r\n  <div class=\"view-type-container\">\r\n    <div class=\"view-type\">\r\n      <li (click)=\"setViewType(1)\" [ngClass]=\"{ active: viewType === 1 }\" pTooltip=\"[[[[Chart View]]]]\">\r\n        <app-leader-board> </app-leader-board>\r\n      </li>\r\n\r\n      <li (click)=\"setViewType(2)\" [ngClass]=\"{ active: viewType === 2 }\" pTooltip=\"[[[[Table view]]]]\">\r\n        <app-table-icon> </app-table-icon>\r\n      </li>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"chartDataCount || listDataCount\">\r\n    <div class=\"buttons-slider-container\">\r\n      <a\r\n        class=\"grid_icon_btn-export tooltips\"\r\n        [title]=\"viewType === 1 ? '[[[[Export Chart]]]]' : '[[[[Export Table]]]]'\"\r\n        data-original-title=\"[[[Export]]]]\"\r\n        ><span></span\r\n      ></a>\r\n\r\n      <div class=\"f-right buttons-slider\">\r\n        <ng-container *ngIf=\"viewType === 2; else chartExport\">\r\n          <a class=\"grid_icon_btn-sm-pdf\" title=\"[[[[Export PDF]]]]\" (click)=\"exportToPdf()\"><span></span></a>\r\n          <a class=\"grid_icon_btn-sm-excl\" title=\"[[[[Export Excel]]]]\" (click)=\"exportToExcel()\"><span></span></a\r\n        ></ng-container>\r\n        <ng-template #chartExport>\r\n          <a id=\"chartExport\" title=\"[[[[Export to Png]]]]\">\r\n            <i class=\"far fa-image\"> </i>\r\n          </a>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"chip-info\">\r\n    <span class=\"d-flex\" (mouseenter)=\"scoreMetrics.show($event)\" (mouseleave)=\"scoreMetrics.hide()\">\r\n      <app-info-icon></app-info-icon>\r\n      [[[[Scorecards]]]]\r\n    </span>\r\n  </div>\r\n</div>\r\n\r\n<p-overlayPanel #scoreMetrics [autoZIndex]=\"false\">\r\n  <ng-template pTemplate>\r\n    <div class=\"card score-metric-info\">\r\n      <div class=\"card-title\">\r\n        <h4>[[[[Scorecards]]]]</h4>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <ng-container *ngFor=\"let score of scoreMetricList\">\r\n          <div>\r\n            <span class=\"circle\" [ngStyle]=\"{ 'background-color': score.Color }\"> </span>\r\n            <span>\r\n              {{ score.AlertRule.Name }}\r\n            </span>\r\n          </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"scoreMetricList?.length < 1\">\r\n          <p style=\"color: #fff\">[[[[No scorecards available for this scorecard]]]]</p>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</p-overlayPanel>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { IScorecards } from '../../../score-metrics/interfaces/score-metric.interface';\r\n\r\n@Component({\r\n  selector: 'app-driver-score-header',\r\n  templateUrl: './driver-score-header.component.html',\r\n  styleUrls: ['./driver-score-header.component.scss'],\r\n})\r\nexport class DriverScoreHeaderComponent {\r\n  @Input() activeShip = 1;\r\n  @Input() viewType = 1;\r\n  @Input() scoreMetricList: IScorecards[] = [];\r\n  @Input() chartDataCount = 0;\r\n  @Input() listDataCount = 0;\r\n\r\n  @Output() activeChip = new EventEmitter<1 | 2>();\r\n  @Output() activeViewType = new EventEmitter<1 | 2>();\r\n  @Output() exportPdf = new EventEmitter<boolean>();\r\n  @Output() exportExcel = new EventEmitter<boolean>();\r\n\r\n  constructor() {}\r\n\r\n  setActiveChip(chipNumber: 1 | 2) {\r\n    this.activeChip.emit(chipNumber);\r\n  }\r\n\r\n  setViewType(viewType: 1 | 2) {\r\n    this.activeViewType.emit(viewType);\r\n  }\r\n\r\n  exportToPdf() {\r\n    this.exportPdf.emit(true);\r\n  }\r\n\r\n  exportToExcel() {\r\n    this.exportExcel.emit(true);\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport * as am4charts from '@amcharts/amcharts4/charts';\r\nimport * as am4core from '@amcharts/amcharts4/core';\r\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\r\nimport am4themes_dark from '@amcharts/amcharts4/themes/dark';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport type { OnChanges } from '@angular/core';\r\nimport { Component, EventEmitter, Inject, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { config } from 'src/app/shared/app.config';\r\n\r\n@Component({\r\n  selector: 'app-chart-view',\r\n  templateUrl: './chart-view.component.html',\r\n  styleUrls: ['./chart-view.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ChartViewComponent implements OnChanges {\r\n  @Input() data: {\r\n    name: string;\r\n    value: number;\r\n    id: number;\r\n    staffId: number;\r\n  }[] = [];\r\n  @Output() getSelected = new EventEmitter<any>();\r\n  constructor(@Inject(DOCUMENT) private document: Document) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.createChart();\r\n  }\r\n\r\n  createChart() {\r\n    const createGrid = (value: number) => {\r\n      let range = valueAxis.axisRanges.create();\r\n      range.value = value;\r\n      range.label.text = '{value}%';\r\n    };\r\n\r\n    // Themes begin\r\n    am4core.useTheme(am4themes_animated);\r\n    am4core.useTheme(am4themes_dark);\r\n    am4core.addLicense(config.amChartLicense);\r\n    // Themes end\r\n\r\n    // Create chart instance\r\n    let chart = am4core.create('chartdiv', am4charts.XYChart);\r\n\r\n    // Add data\r\n    chart.data = this.data;\r\n\r\n    // Enable export\r\n\r\n    // Create axes\r\n    chart.responsive.enabled = true;\r\n    let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.dataFields.category = 'staffId';\r\n    categoryAxis.dataFields.id = 'name';\r\n\r\n    categoryAxis.renderer.grid.template.location = 0;\r\n    categoryAxis.renderer.minGridDistance = 30;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis())!;\r\n    valueAxis.renderer.labels.template.adapter.add('text', (text, label) => {\r\n      return (label.dataItem as any).value + '%';\r\n    });\r\n    valueAxis.min = 0;\r\n    valueAxis.max = 100;\r\n    // valueAxis.renderer.minGridDistance = 2;\r\n    valueAxis.renderer.grid.template.disabled = true;\r\n    valueAxis.renderer.labels.template.disabled = true;\r\n    valueAxis.fill = am4core.color('#fff');\r\n    createGrid(0);\r\n    createGrid(25);\r\n    createGrid(50);\r\n    createGrid(75);\r\n    createGrid(100);\r\n\r\n    let label = categoryAxis.renderer.labels.template;\r\n    label.truncate = true;\r\n    label.maxWidth = 120;\r\n    // label.tooltipText = '{id}';\r\n\r\n    // Create series\r\n    let series = chart.series.push(new am4charts.ColumnSeries());\r\n    series.dataFields.valueY = 'value';\r\n    series.dataFields.categoryX = 'staffId';\r\n    series.dataFields.customValue = 'id';\r\n    series.name = 'staffId';\r\n    series.columns.template.tooltipText = '[font-size:14px]{categoryX}: [bold]{valueY}%[/]';\r\n    series.columns.template.fillOpacity = 0.8;\r\n\r\n    // Add label\r\n    var labelBullet = series.bullets.push(new am4charts.LabelBullet());\r\n    labelBullet.label.text = '[bold]{valueY}%';\r\n    labelBullet.locationY = 0.5;\r\n    // labelBullet.dom.transform.baseVal=\"translate(-9,-15.5)\";\r\n    labelBullet.label.fill = am4core.color('#fff');\r\n    series.stacked = false;\r\n    series.legendSettings.itemValueText = '{valueY.percent}%';\r\n    series.calculatePercent = true;\r\n    series.columns.template.stroke = am4core.color('#fff0');\r\n    series.columns.template.adapter.add('fill', function (fill, target) {\r\n      if (target.dataItem && (target.dataItem as any).valueY >= 85) {\r\n        return am4core.color('#09a709');\r\n      } else if (target.dataItem && (target.dataItem as any).valueY >= 60 && (target.dataItem as any).valueY < 85) {\r\n        return am4core.color('#ffc400');\r\n      } else if (target.dataItem && (target.dataItem as any).valueY < 60 && (target.dataItem as any).valueY > 0) {\r\n        return am4core.color('#b82121');\r\n      } else if (target.dataItem && (target.dataItem as any).valueY <= 0) {\r\n        let element: any = target.dataItem as any;\r\n        element.value = '';\r\n        element.valueY = '';\r\n        target.dataItem = element;\r\n        target.dataItem.hidden = true;\r\n        target.dataItem.visible = false;\r\n        return am4core.color('#6a6a6a');\r\n      } else {\r\n        return am4core.color('#6a6a6a');\r\n      }\r\n    });\r\n    series.columns.template.events.on(\r\n      'hit',\r\n      (ev) => {\r\n        this.getSelected.emit(ev.target.dataItem!.dataContext);\r\n      },\r\n      this\r\n    );\r\n\r\n    let columnTemplate = series.columns.template;\r\n    columnTemplate.strokeWidth = 2;\r\n    columnTemplate.strokeOpacity = 1;\r\n\r\n    chart.events.on('ready', () => {\r\n      const options = chart.exporting.getFormatOptions('png');\r\n      options.keepTainted = true;\r\n      chart.exporting.setFormatOptions('png', options);\r\n\r\n      // eslint-disable-next-line no-undef\r\n      const downloadBtn = document.getElementById('chartExport')!;\r\n      downloadBtn.onclick = () => {\r\n        chart.exporting.filePrefix = 'driver-scorecard';\r\n\r\n        chart.exporting.export('png', {});\r\n      };\r\n\r\n      this.document\r\n        .getElementsByClassName('amcharts-amexport-clickable')[0]\r\n        ?.classList.add('k-icon', 'k-i-image', 'k-i-photo');\r\n      this.document.getElementsByClassName('amcharts-amexport-item-png')[0].setAttribute('title', 'Export As Png');\r\n    });\r\n  }\r\n}\r\n","<div id=\"chartdiv\"></div>\r\n","<div class=\"driver-content\">\r\n  <div class=\"driver-header\">\r\n    <label style=\"max-width: 40%\">\r\n      {{ selectedDriver.DriverName }}\r\n    </label>\r\n    <label>\r\n      [[[[Staff ID]]]]:\r\n      <span>\r\n        {{ selectedDriver.DriverStaffId }}\r\n      </span>\r\n    </label>\r\n    <label>\r\n      Score:\r\n      <ng-container [ngSwitch]=\"true\">\r\n        <ng-container *ngSwitchCase=\"selectedDriver.ScoreLevel === 'Good'\">\r\n          <span style=\"color: #09a709\"> {{ selectedDriver.Score }}% </span>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"selectedDriver.ScoreLevel === 'Moderate'\">\r\n          <span style=\"color: #ffc400\"> {{ selectedDriver.Score }}% </span>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"selectedDriver.ScoreLevel === 'Bad'\">\r\n          <span style=\"color: #d20404\"> {{ selectedDriver.Score }}% </span>\r\n        </ng-container>\r\n        <ng-container *ngSwitchDefault>\r\n          <span style=\"color: #6a6a6a\"> {{ selectedDriver.Score }}% </span>\r\n        </ng-container>\r\n      </ng-container>\r\n    </label>\r\n  </div>\r\n  <div class=\"driver-body\">\r\n    <p>\r\n      <span>[[[[Permit Id]]]]</span>\r\n      <span>{{ selectedDriver.PermitId ?? '- - -' }}</span>\r\n    </p>\r\n    <p>\r\n      <span>[[[[Score level]]]]</span>\r\n      <ng-container [ngSwitch]=\"true\">\r\n        <ng-container *ngSwitchCase=\"selectedDriver.ScoreLevel === 'Good'\">\r\n          <span style=\"color: #09a709\">{{ selectedDriver.ScoreLevel }}</span>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"selectedDriver.ScoreLevel === 'Moderate'\">\r\n          <span style=\"color: #ffc400\">\r\n            {{ selectedDriver.ScoreLevel }}\r\n          </span>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"selectedDriver.ScoreLevel === 'Bad'\">\r\n          <span style=\"color: #d20404\">\r\n            {{ selectedDriver.ScoreLevel }}\r\n          </span>\r\n        </ng-container>\r\n        <ng-container *ngSwitchDefault>\r\n          <span style=\"color: #6a6a6a\"> {{ selectedDriver.ScoreLevel ?? '- - -' }}</span>\r\n        </ng-container>\r\n      </ng-container>\r\n    </p>\r\n    <p>\r\n      <span>[[[[Distance(km)]]]]</span>\r\n      <span>{{ selectedDriver.Distance ?? '- - -' }}</span>\r\n    </p>\r\n    <p>\r\n      <span>[[[[Duty time]]]]</span>\r\n      <span>{{ selectedDriver.TransportTime ?? '- - -' }}</span>\r\n    </p>\r\n    <p style=\"flex-direction: column\">\r\n      <span>[[[[Violation]]]]</span>\r\n      <ng-container *ngIf=\"selectedDriver.WeightedScoreKeyValue.length > 0; else emptyViolation\">\r\n        <span class=\"violation\">\r\n          <span\r\n            (mousemove)=\"showViolations($event, selectedDriver.WeightedScoreKeyValue)\"\r\n            (mouseout)=\"violationsOverlay.hide()\"\r\n            *ngFor=\"let violation of selectedDriver.WeightedScoreKeyValue\"\r\n            [style.width.%]=\"violation.Percentage < 5 ? 6 : violation.Percentage\"\r\n            [ngStyle]=\"{\r\n              'background-color': violation.Color\r\n            }\"\r\n          >\r\n            {{ violation.Count }}\r\n          </span>\r\n        </span>\r\n      </ng-container>\r\n      <ng-template #emptyViolation>\r\n        <span\r\n          class=\"empty-violation\"\r\n          (mouseout)=\"emptyViolationsOverlay.hide()\"\r\n          (mouseenter)=\"emptyViolationsOverlay.show($event)\"\r\n        ></span>\r\n      </ng-template>\r\n    </p>\r\n  </div>\r\n</div>\r\n\r\n<p-overlayPanel #violationsOverlay [autoZIndex]=\"true\" styleClass=\"violation-info-window\">\r\n  <ng-template pTemplate>\r\n    <div class=\"card bg-transparent\">\r\n      <div class=\"card-body\">\r\n        <div *ngFor=\"let violation of violationsList\">\r\n          <div>\r\n            <span class=\"circle\" [ngStyle]=\"{ 'background-color': violation.Color }\"> </span>\r\n            <span style=\"margin-right: 1em\">\r\n              {{ violation.Name }}\r\n            </span>\r\n          </div>\r\n          <div style=\"align-self: end\">\r\n            {{ violation.Count }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</p-overlayPanel>\r\n\r\n<p-overlayPanel #emptyViolationsOverlay [autoZIndex]=\"true\" styleClass=\"violation-info-window\">\r\n  <ng-template pTemplate>\r\n    <div class=\"card bg-transparent\">\r\n      <div class=\"card-body\">\r\n        <div>\r\n          <div>\r\n            <span class=\"circle\" style=\"background-color: #6a6a6a\"> </span>\r\n            <span> [[[[Driver has 0 violations]]]] </span>\r\n          </div>\r\n          <div style=\"align-self: end\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</p-overlayPanel>\r\n","import { Component, Input, ViewChild } from '@angular/core';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { Driver } from '../../interfaces/driver.interface';\r\n\r\n@Component({\r\n  selector: 'app-driver-info-card',\r\n  templateUrl: './driver-info-card.component.html',\r\n  styleUrls: ['./driver-info-card.component.scss'],\r\n})\r\nexport class DriverInfoCardComponent {\r\n  @Input() selectedDriver: Driver;\r\n  @ViewChild('violationsOverlay') violationsOverlay!: OverlayPanel;\r\n\r\n  violationsList: { name: string; count: number; color: string }[] = [];\r\n\r\n  constructor() {}\r\n\r\n  showViolations(event: any, violationsList: any) {\r\n    this.violationsList = violationsList;\r\n    this.violationsOverlay.show(event);\r\n  }\r\n}\r\n","<div class=\"advanced-driver-wrapper\">\r\n  <div class=\"driver-header\">\r\n    <h3 class=\"text-orange\">[[[[Driver Scorecards]]]] <small class=\"text-white\">[[[[index]]]]</small></h3>\r\n    <div class=\"company-details\" #header>\r\n      <span class=\"text-muted\">[[[[Company name]]]]:</span>\r\n      <app-building-icon></app-building-icon>\r\n      <ng-container *ngIf=\"tenantsLoading; else tenantLoaded\">\r\n        <p style=\"text-decoration: underline; align-self: end\">\r\n          {{ currentTenant?.name }}\r\n        </p>\r\n      </ng-container>\r\n      <ng-template #tenantLoaded>\r\n        <p-dropdown\r\n          [options]=\"tenantsList\"\r\n          id=\"ddlTenants\"\r\n          name=\"ddlTenants\"\r\n          placeholder=\"[[[[Loading]]]] ...\"\r\n          optionLabel=\"name\"\r\n          optionValue=\"id\"\r\n          [filter]=\"true\"\r\n          filterBy=\"name\"\r\n          [autofocusFilter]=\"true\"\r\n          [(ngModel)]=\"selectedTenant\"\r\n          (onShow)=\"tenantSelectionChange($event)\"\r\n          (ngModelChange)=\"tenantChange()\"\r\n          [disabled]=\"tenantsLoading\"\r\n          [scrollHeight]=\"'250px'\"\r\n        >\r\n          <ng-template let-client pTemplate=\"selectedItem\">\r\n            <div [pTooltip]=\"client.name\" class=\"selected-item\" tooltipPosition=\"top\">\r\n              {{ client.name }}\r\n            </div>\r\n          </ng-template>\r\n        </p-dropdown>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"date-range-wrapper\">\r\n    <label class=\"text-white\"> [[[[Selected date]]]]: </label>\r\n    <kendo-daterange>\r\n      <label>\r\n        <span class=\"label\">[[[[From]]]]</span>\r\n        <svg\r\n          #datepopup\r\n          [ngClass]=\"{ disabled: loading }\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"24\"\r\n          height=\"24\"\r\n          viewBox=\"0 0 24 24\"\r\n          style=\"display: inline\"\r\n        >\r\n          <g style=\"opacity: 0.7\">\r\n            <path data-name=\"Path 5\" d=\"M0 0h24v24H0z\" style=\"fill: none\" />\r\n            <path\r\n              data-name=\"Path 6\"\r\n              d=\"M19 3h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2.006 2.006 0 0 0 2-2V5a2.006 2.006 0 0 0-2-2zm0 16H5V9h14zm0-12H5V5h14zM7 11h5v5H7z\"\r\n              style=\"fill: #fff\"\r\n            />\r\n          </g>\r\n        </svg>\r\n\r\n        <span class=\"text-white\">{{ startDate.display }}</span>\r\n        <kendo-dateinput\r\n          kendoDateRangeStartInput\r\n          [disabled]=\"loading\"\r\n          [(value)]=\"startDate.value\"\r\n          formatPlaceholder=\"formatPattern\"\r\n        >\r\n        </kendo-dateinput>\r\n      </label>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"margin-top: -4px\">\r\n        <path data-name=\"Path 7\" d=\"M0 0h24v24H0z\" style=\"fill: none\" />\r\n        <path data-name=\"Path 8\" d=\"m22 12-4-4v3H3v2h15v3z\" style=\"fill: #f5f5f5\" />\r\n      </svg>\r\n\r\n      <label>\r\n        <span class=\"label\">[[[[To]]]]</span>\r\n        <span class=\"text-white\">{{ endDate.display }}</span>\r\n        <kendo-dateinput\r\n          kendoDateRangeEndInput\r\n          [disabled]=\"loading\"\r\n          [(value)]=\"endDate.value\"\r\n          formatPlaceholder=\"formatPattern\"\r\n        >\r\n        </kendo-dateinput>\r\n      </label>\r\n\r\n      <kendo-daterange-popup [animate]=\"{ type: 'fade' }\" #popup [anchor]=\"datepopup\">\r\n        <ng-template kendoDateRangePopupTemplate>\r\n          <kendo-multiviewcalendar kendoDateRangeSelection> </kendo-multiviewcalendar>\r\n          <button class=\"btn btn-datepicker\" [disabled]=\"loading\" (click)=\"submitDate(popup)\">[[[[Submit]]]]</button>\r\n        </ng-template>\r\n      </kendo-daterange-popup>\r\n    </kendo-daterange>\r\n  </div>\r\n\r\n  <div class=\"score-card-list\" *ngIf=\"scoreCardsTabs.length > 0\">\r\n    <ng-container *ngIf=\"loading; else defaultView\">\r\n      <div class=\"loader-template\">\r\n        <kendo-loader [type]=\"loader.type\" [themeColor]=\"loader.themeColor\" [size]=\"loader.size\"> </kendo-loader>\r\n      </div>\r\n    </ng-container>\r\n    <ng-template #defaultView>\r\n      <div class=\"tabs-view\">\r\n        <div\r\n          class=\"tab\"\r\n          *ngFor=\"let score of scoreCardsTabs; let i = index\"\r\n          [ngClass]=\"{ active: score.active }\"\r\n          (click)=\"setActivetab(score)\"\r\n        >\r\n          <a [ngClass]=\"{ active: score.active }\">\r\n            {{ score.name }}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div class=\"score-card-container\">\r\n        <app-driver-score-header\r\n          [activeShip]=\"activeChip\"\r\n          [viewType]=\"viewType\"\r\n          [scoreMetricList]=\"scoreMetricList\"\r\n          [chartDataCount]=\"chartData.length\"\r\n          [listDataCount]=\"virtualDriverScorecardList.length\"\r\n          (activeChip)=\"setActiveChip($event)\"\r\n          (activeViewType)=\"setViewType($event)\"\r\n          (exportPdf)=\"exportToPdf()\"\r\n          (exportExcel)=\"exportToExcel()\"\r\n        >\r\n        </app-driver-score-header>\r\n\r\n        <div class=\"score-card-content\">\r\n          <div class=\"row\">\r\n            <ng-container *ngIf=\"viewType === 2; else chartView\">\r\n              <div class=\"col-md-12\">\r\n                <div class=\"inline-list-view\" [@inOutAnimation]>\r\n                  <app-list-view\r\n                    #GridView\r\n                    [scoreCardId]=\"selectedCard.id\"\r\n                    [startDate]=\"startDate\"\r\n                    [endDate]=\"endDate\"\r\n                    [isLoading]=\"loading\"\r\n                    [gridData]=\"virtualDriverScorecardList\"\r\n                    [totalRecords]=\"virtualDriverScorecardList.length\"\r\n                    [showHeader]=\"false\"\r\n                    [showRefresh]=\"false\"\r\n                    [tenantId]=\"selectedTenant\"\r\n                    [sort]=\"driverSort\"\r\n                    [showDefaultFilters]=\"false\"\r\n                    [scoreLevels]=\"inlineGridScoreLevels\"\r\n                  >\r\n                  </app-list-view>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n            <ng-template #chartView>\r\n              <div class=\"col-md-12 col-lg-8\">\r\n                <div class=\"chart-view\" [@inOutAnimation]>\r\n                  <ng-container *ngIf=\"chartData.length > 0; else emptyChartView\">\r\n                    <app-chart-view [data]=\"chartData\" (getSelected)=\"getSelectedDriver($event)\"> </app-chart-view>\r\n                  </ng-container>\r\n                  <ng-template #emptyChartView>\r\n                    <div class=\"empty-chart-view\">[[[[The selected date range does not have any data]]]]</div>\r\n                  </ng-template>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-12 col-lg-4\">\r\n                <div class=\"driver-info\" [@inOutAnimation]>\r\n                  <ng-container *ngIf=\"selectedDriver; else emptyDriver\">\r\n                    <app-driver-info-card [selectedDriver]=\"selectedDriver\"></app-driver-info-card>\r\n                  </ng-container>\r\n                  <ng-template #emptyDriver>\r\n                    <div class=\"empty-driver\">\r\n                      <app-empty-driver-icon></app-empty-driver-icon>\r\n                      <p>[[[[Move the cursor and select column from the chart adjacent]]]]</p>\r\n                    </div>\r\n                  </ng-template>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"driver-container\">\r\n    <h3>[[[[All drivers]]]]</h3>\r\n    <div class=\"driver-grid\">\r\n      <ng-container *ngIf=\"selectedCard.id\">\r\n        <app-list-view\r\n          [scoreCardId]=\"selectedCard.id\"\r\n          [startDate]=\"startDate\"\r\n          [endDate]=\"endDate\"\r\n          [isLoading]=\"loading\"\r\n          [gridData]=\"gridData\"\r\n          [totalRecords]=\"totalRecords\"\r\n          [tenantId]=\"selectedTenant\"\r\n        >\r\n        </app-list-view>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport type { Routes } from '@angular/router';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AdvancedDriverComponent } from './view/advanced-driver.component';\r\n\r\nconst routes: Routes = [{ path: '', component: AdvancedDriverComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdvancedDriverRoutingModule {}\r\n","/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n/* eslint-disable @typescript-eslint/consistent-type-imports */\r\nimport { formatDate } from '@angular/common';\r\nimport type { OnInit } from '@angular/core';\r\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport type { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { slideInOutAnimation } from 'src/app/shared/animations/animations';\r\nimport { SessionService } from 'src/app/shared/services/session-service/session.service';\r\nimport type { IScorecards } from '../../score-metrics/interfaces/score-metric.interface';\r\nimport { ListViewComponent } from '../components/list-view/list-view.component';\r\nimport type { Driver } from '../interfaces/driver.interface';\r\nimport type { IMetrics } from './../../score-metrics/interfaces/score-metric.interface';\r\nimport { AdvancedDriverService } from './../services/advanced-driver.service';\r\n\r\n@Component({\r\n  selector: 'app-advanced-driver',\r\n  templateUrl: './advanced-driver.component.html',\r\n  styleUrls: ['./advanced-driver.component.scss'],\r\n  animations: slideInOutAnimation,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class AdvancedDriverComponent implements OnInit {\r\n  @ViewChild('violationsOverlay') violationsOverlay!: OverlayPanel;\r\n  @ViewChild('GridView') listviewComponent!: ListViewComponent;\r\n  scoreCardList: IScorecards[] = [];\r\n  scoreMetricList: IMetrics[] = [];\r\n  scoreCardsTabs: { id: number; name: string; active: boolean }[] = [];\r\n  selectedDriver: Driver = null;\r\n  selectedTenant: number;\r\n  tenantsList = [];\r\n  public gridData: Driver[] = [];\r\n  public totalRecords = 0;\r\n  startDate = {\r\n    display: formatDate(new Date(), 'd MMM EEEE', this.session.locale),\r\n    value: new Date(),\r\n  };\r\n  endDate = {\r\n    display: formatDate(new Date(), 'd MMM EEEE', this.session.locale),\r\n    value: new Date(),\r\n  };\r\n  selectedCard: any = {};\r\n  activeChip = 1;\r\n  chartData = [];\r\n\r\n  driverScorecardList: any = [];\r\n  virtualDriverScorecardList: any = [];\r\n  viewType: 1 | 2 = 1;\r\n  loader = {\r\n    type: 'pulsing',\r\n    themeColor: 'primary',\r\n    size: 'large',\r\n  };\r\n  loading = true;\r\n  tenantsLoading = true;\r\n  currentTenant: { id: number; name: string };\r\n  driverSort = [{ field: 'Score', dir: 'asc' }];\r\n  public inlineGridScoreLevels = [\r\n    {\r\n      ScoreLevel: '[[[[All]]]]',\r\n      value: 'All',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[Good]]]]',\r\n      value: 'Good',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[Moderate]]]]',\r\n      value: 'Moderate',\r\n    },\r\n    {\r\n      ScoreLevel: '[[[[Bad]]]]',\r\n      value: 'Bad',\r\n    },\r\n  ];\r\n  constructor(private apiService: AdvancedDriverService, private session: SessionService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.currentTenant = this.session.currentTenant;\r\n    this.selectedTenant = this.currentTenant.id;\r\n    this.getScoreCardList();\r\n    this.getTenantsSettings();\r\n  }\r\n\r\n  tenantChange() {\r\n    this.getScoreCardList();\r\n  }\r\n\r\n  tenantSelectionChange(_event: any) {\r\n    const parent = document.getElementsByClassName('p-dropdown-items-wrapper')[0];\r\n    const child = document.getElementById('p-highlighted-option');\r\n    scrollParentToChild(parent, child);\r\n  }\r\n\r\n  getTenantsSettings() {\r\n    this.apiService.getTenants().subscribe((res: any) => {\r\n      // eslint-disable-next-line no-undef\r\n      this.tenantsList = res.Tenants.map((e) => ({ name: e.Name, id: e.TenantId }));\r\n      this.selectedTenant = res.CurrentTenant;\r\n      this.tenantsLoading = false;\r\n    });\r\n  }\r\n\r\n  setActiveChip(chipNumber: number) {\r\n    this.activeChip = chipNumber;\r\n    this.selectedDriver = null;\r\n    if (chipNumber == 1) {\r\n      this.driverSort = [{ field: 'Score', dir: 'desc' }];\r\n      this.getHighestValues();\r\n    } else {\r\n      this.driverSort = [{ field: 'Score', dir: 'asc' }];\r\n      this.getLowestValues();\r\n    }\r\n  }\r\n\r\n  setViewType(viewType: 1 | 2) {\r\n    this.viewType = viewType;\r\n  }\r\n\r\n  getDriverScoreCard() {\r\n    this.loading = true;\r\n    const startDate = formatDate(this.startDate.value, 'dd/MM/yyyy', this.session.locale),\r\n      endDate = formatDate(this.endDate.value, 'dd/MM/yyyy', this.session.locale);\r\n    this.apiService\r\n      .getDriverScoreCard(this.selectedCard.id, startDate, endDate, this.selectedTenant)\r\n      .subscribe((res: any) => {\r\n        this.loading = false;\r\n        this.totalRecords = res.Total;\r\n        this.gridData = res.Data;\r\n        const sortedData = res.Data.sort((a: any, b: any) => parseFloat(b.Score) - parseFloat(a.Score));\r\n        this.driverScorecardList = sortedData;\r\n        this.virtualDriverScorecardList = sortedData;\r\n        if (this.activeChip == 1) {\r\n          this.getHighestValues();\r\n        } else {\r\n          this.getLowestValues();\r\n        }\r\n        this.getScoreMetrics();\r\n      });\r\n  }\r\n\r\n  getScoreMetrics() {\r\n    this.apiService\r\n      .getScorecardById(this.selectedCard.id, this.selectedTenant)\r\n      .subscribe((res: any) => (this.scoreMetricList = res.Metrics));\r\n  }\r\n\r\n  getHighestValues() {\r\n    const highestScorecardList = this.driverScorecardList.filter((e: any) => e.ScoreLevel !== 'N/A').slice(0, 10);\r\n    this.virtualDriverScorecardList = highestScorecardList;\r\n    this.chartData = this.virtualDriverScorecardList.map((e: any) => ({\r\n      name: e.DriverName,\r\n      value: e.Score,\r\n      id: e.DriverId,\r\n      staffId: e.DriverStaffId,\r\n    }));\r\n  }\r\n\r\n  getLowestValues() {\r\n    const lowestScorecardList = this.driverScorecardList.filter((e: any) => e.ScoreLevel !== 'N/A').slice(-10);\r\n    this.virtualDriverScorecardList = lowestScorecardList;\r\n    this.chartData = this.virtualDriverScorecardList.map((e: any) => ({\r\n      name: e.DriverName,\r\n      value: e.Score,\r\n      id: e.DriverId,\r\n      staffId: e.DriverStaffId,\r\n    }));\r\n  }\r\n\r\n  getScoreCardList() {\r\n    this.scoreCardsTabs = [];\r\n    this.apiService.getScorecards(this.selectedTenant).subscribe((res: any) => {\r\n      res.map((res, i) => {\r\n        this.scoreCardsTabs.push({\r\n          id: res.Id,\r\n          name: res.Name,\r\n          active: i == 0 ? true : false,\r\n        });\r\n        this.selectedCard = this.scoreCardsTabs[0];\r\n      });\r\n      this.getDriverScoreCard();\r\n      this.setActiveChip(this.activeChip);\r\n    });\r\n  }\r\n\r\n  setActivetab(tab: { id: number; name: string; active: boolean }) {\r\n    this.scoreCardsTabs.forEach((res) => (res.active = false));\r\n    this.scoreCardsTabs.find((res) => res.id == tab.id)!.active = true;\r\n    this.selectedCard = this.scoreCardsTabs.find((res) => res.id == tab.id)!;\r\n    this.selectedDriver = null;\r\n    this.getDriverScoreCard();\r\n  }\r\n\r\n  getSelectedDriver(event: any) {\r\n    this.selectedDriver = this.virtualDriverScorecardList.find((e: any) => e.DriverId == event.id);\r\n  }\r\n\r\n  submitDate(event: any) {\r\n    this.endDate.display = formatDate(this.endDate.value, 'd MMM EEEE', this.session.locale);\r\n    this.startDate.display = formatDate(this.startDate.value, 'd MMM EEEE', this.session.locale);\r\n    event?.toggle();\r\n    this.getDriverScoreCard();\r\n  }\r\n\r\n  exportToPdf() {\r\n    if (this.listviewComponent) {\r\n      this.listviewComponent.exportToPdf(this.listviewComponent.grid);\r\n    }\r\n  }\r\n\r\n  exportToExcel() {\r\n    if (this.listviewComponent) {\r\n      this.listviewComponent.exportToExcel(this.listviewComponent.grid);\r\n    }\r\n  }\r\n}\r\n\r\nexport function scrollParentToChild(parent, child) {\r\n  // Where is the parent on page\r\n  var parentRect = parent.getBoundingClientRect();\r\n  // What can you see?\r\n  var parentViewableArea = {\r\n    height: parent.clientHeight,\r\n    width: parent.clientWidth,\r\n  };\r\n\r\n  // Where is the child\r\n  var childRect = child.getBoundingClientRect();\r\n  // Is the child viewable?\r\n  var isViewable = childRect.top >= parentRect.top && childRect.bottom <= parentRect.top + parentViewableArea.height;\r\n\r\n  // if you can't see the child try to scroll parent\r\n  if (!isViewable) {\r\n    // Should we scroll using top or bottom? Find the smaller ABS adjustment\r\n    const scrollTop = childRect.top - parentRect.top;\r\n    const scrollBot = childRect.bottom - parentRect.bottom;\r\n    if (Math.abs(scrollTop) < Math.abs(scrollBot)) {\r\n      // we're near the top of the list\r\n      parent.scrollTop += scrollTop;\r\n    } else {\r\n      // we're near the bottom of the list\r\n      parent.scrollTop += scrollBot;\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { DateInputsModule } from '@progress/kendo-angular-dateinputs';\r\nimport { DropDownsModule, MultiSelectModule } from '@progress/kendo-angular-dropdowns';\r\nimport { ExcelModule, GridModule, PDFModule } from '@progress/kendo-angular-grid';\r\nimport { IconsModule } from '@progress/kendo-angular-icons';\r\nimport { IndicatorsModule } from '@progress/kendo-angular-indicators';\r\nimport { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { IntlModule } from '@progress/kendo-angular-intl';\r\nimport { LabelModule } from '@progress/kendo-angular-label';\r\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { SvgIconsModule } from 'src/app/shared/classes/svg/svg-icons/svg-icons.module';\r\nimport { AdvancedDriverRoutingModule } from './advanced-driver-routing.module';\r\nimport { ChartViewComponent } from './components/chart-view/chart-view.component';\r\nimport { DriverInfoCardComponent } from './components/driver-info-card/driver-info-card.component';\r\nimport { DriverScoreHeaderComponent } from './components/driver-score-header/driver-score-header.component';\r\nimport { ListViewComponent } from './components/list-view/list-view.component';\r\nimport { AdvancedDriverComponent } from './view/advanced-driver.component';\r\nimport { DateRangeFilterComponent } from './components/date-range-filter/date-range-filter.component';\r\n\r\nconst KENDO_COMPONENTS = [\r\n  IntlModule,\r\n  LabelModule,\r\n  DateInputsModule,\r\n  GridModule,\r\n  PDFModule,\r\n  ExcelModule,\r\n  InputsModule,\r\n  ButtonsModule,\r\n  DropDownsModule,\r\n  IconsModule,\r\n  IndicatorsModule,\r\n  MultiSelectModule,\r\n  FormsModule,\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AdvancedDriverComponent,\r\n    ListViewComponent,\r\n    ChartViewComponent,\r\n    DriverInfoCardComponent,\r\n    DriverScoreHeaderComponent,\r\n    DateRangeFilterComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AdvancedDriverRoutingModule,\r\n    ...KENDO_COMPONENTS,\r\n    NgxSkeletonLoaderModule,\r\n    OverlayPanelModule,\r\n    TooltipModule,\r\n    SvgIconsModule,\r\n    DropdownModule,\r\n  ],\r\n})\r\nexport class AdvancedDriverModule {}\r\n"]}