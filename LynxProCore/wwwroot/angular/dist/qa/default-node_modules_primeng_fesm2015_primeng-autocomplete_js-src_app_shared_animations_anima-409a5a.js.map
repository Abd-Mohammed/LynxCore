{"version":3,"file":"default-node_modules_primeng_fesm2015_primeng-autocomplete_js-src_app_shared_animations_anima-409a5a.js","mappings":"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","names":["i0","_r8","ctx_r7","onInputClick","ctx_r9","onInput","ctx_r10","onKeydown","ctx_r11","onKeyup","ctx_r12","onInputFocus","ctx_r13","onInputBlur","ctx_r14","onInputChange","ctx_r15","onInputPaste","ctx_r1","$implicit","ctx_r22","_r26","ctx_r25","removeItem","_r28","_r18","focus","ctx_r29","ctx_r30","ctx_r31","ctx_r32","ctx_r33","ctx_r34","ctx_r35","ctx_r36","ctx_r2","_r39","ctx_r38","handleDropdownClick","ctx_r49","ctx_r62","_r66","ctx_r65","selectItem","ctx_r77","_r81","ctx_r80","_r87","ctx_r86","onOverlayClick","ctx_r88","onOverlayAnimationStart","ctx_r89","onOverlayAnimationEnd","ctx_r5","AUTOCOMPLETE_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","AutoComplete","multi","constructor","el","renderer","cd","differs","config","overlayService","this","minLength","delay","type","autoZIndex","baseZIndex","dropdownIcon","unique","completeOnFocus","completeMethod","EventEmitter","onSelect","onUnselect","onFocus","onBlur","onDropdownClick","onClear","onKeyUp","onShow","onHide","scrollHeight","dropdownMode","showTransitionOptions","hideTransitionOptions","autocomplete","onModelChange","onModelTouched","overlayVisible","inputFieldValue","differ","find","create","listId","UniqueComponentId","suggestions","_suggestions","val","handleSuggestionsChange","ngAfterViewChecked","suggestionsUpdated","overlay","offsetParent","setTimeout","alignOverlay","highlightOptionChanged","itemsWrapper","listItem","DomHandler","virtualScroll","viewPort","range","getRenderedRange","updateVirtualScrollSelectedIndex","start","virtualScrollSelectedIndex","end","scrollToIndex","loading","highlightOption","length","noResults","show","autoHighlight","showEmptyMessage","hide","ngAfterContentInit","templates","forEach","item","getType","itemTemplate","template","groupTemplate","selectedItemTemplate","headerTemplate","emptyTemplate","footerTemplate","findOptionIndex","writeValue","value","filled","updateInputField","markForCheck","getOptionGroupChildren","optionGroup","optionGroupChildren","ObjectUtils","items","getOptionGroupLabel","optionGroupLabel","undefined","label","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","event","inputKeyDown","timeout","clearTimeout","target","multiple","forceSelection","emit","i","search","updateFilledState","documentClickListener","inputClick","query","originalEvent","option","forceSelectionUpdateModelTimeout","multiInputEL","nativeElement","isSelected","inputEL","resolveFieldData","itemClicked","focusInput","hasFocus","ownerDocument","activeElement","toState","element","appendOverlay","ZIndexUtils","zIndex","bindDocumentClickListener","bindDocumentResizeListener","bindScrollListener","onOverlayHide","add","appendTo","document","body","appendChild","style","minWidth","children","data","field","restoreOverlayAppend","multiContainerEL","queryValue","emptyMessageLabel","emptyMessage","getTranslation","TranslationKeys","itemIndex","removedValue","filter","which","group","highlightItemIndex","findOptionGroupIndex","nextItemIndex","groupIndex","preventDefault","prevItemIndex","prevGroup","pop","valid","inputValue","trim","suggestion","itemValue","selected","dataKey","index","opts","formattedValue","listen","isDropdownClick","dropdown","dropdownButton","parentNode","unbindDocumentClickListener","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","scrollHandler","ConnectedOverlayScrollHandler","containerEL","unbindScrollListener","ngOnDestroy","destroy","ɵfac","i1","ɵcmp","selectors","dirIndex","PrimeTemplate","_t","ctx","_c0","_c1","_c2","_c3","_c4","CdkVirtualScrollViewport","decls","directives","i2","i3","i4","i5","styles","trigger","transition","opacity","transform","animate","changeDetection","AutoCompleteModule","ɵmod","ɵinj","CommonModule","InputTextModule","ButtonModule","SharedModule","RippleModule","ScrollingModule","animation","left","sequence","stagger","slideInOutAnimation"],"sourceRoot":"webpack:///","sources":["./node_modules/primeng/fesm2015/primeng-autocomplete.js","./src/app/shared/animations/animations.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { InputTextModule } from 'primeng/inputtext';\nimport * as i4 from 'primeng/button';\nimport { ButtonModule } from 'primeng/button';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { UniqueComponentId, ObjectUtils, ZIndexUtils } from 'primeng/utils';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\n\nconst AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => AutoComplete),\n    multi: true\n};\nclass AutoComplete {\n    constructor(el, renderer, cd, differs, config, overlayService) {\n        this.el = el;\n        this.renderer = renderer;\n        this.cd = cd;\n        this.differs = differs;\n        this.config = config;\n        this.overlayService = overlayService;\n        this.minLength = 1;\n        this.delay = 300;\n        this.type = 'text';\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.dropdownIcon = \"pi pi-chevron-down\";\n        this.unique = true;\n        this.completeOnFocus = false;\n        this.completeMethod = new EventEmitter();\n        this.onSelect = new EventEmitter();\n        this.onUnselect = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onDropdownClick = new EventEmitter();\n        this.onClear = new EventEmitter();\n        this.onKeyUp = new EventEmitter();\n        this.onShow = new EventEmitter();\n        this.onHide = new EventEmitter();\n        this.scrollHeight = '200px';\n        this.dropdownMode = 'blank';\n        this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n        this.hideTransitionOptions = '.1s linear';\n        this.autocomplete = 'off';\n        this.onModelChange = () => { };\n        this.onModelTouched = () => { };\n        this.overlayVisible = false;\n        this.focus = false;\n        this.inputFieldValue = null;\n        this.differ = differs.find([]).create(null);\n        this.listId = UniqueComponentId() + '_list';\n    }\n    get suggestions() {\n        return this._suggestions;\n    }\n    set suggestions(val) {\n        this._suggestions = val;\n        this.handleSuggestionsChange();\n    }\n    ngAfterViewChecked() {\n        //Use timeouts as since Angular 4.2, AfterViewChecked is broken and not called after panel is updated\n        if (this.suggestionsUpdated && this.overlay && this.overlay.offsetParent) {\n            setTimeout(() => {\n                if (this.overlay) {\n                    this.alignOverlay();\n                }\n            }, 1);\n            this.suggestionsUpdated = false;\n        }\n        if (this.highlightOptionChanged) {\n            setTimeout(() => {\n                if (this.overlay && this.itemsWrapper) {\n                    let listItem = DomHandler.findSingle(this.overlay, 'li.p-highlight');\n                    if (listItem) {\n                        DomHandler.scrollInView(this.itemsWrapper, listItem);\n                    }\n                    if (this.virtualScroll && this.viewPort) {\n                        let range = this.viewPort.getRenderedRange();\n                        this.updateVirtualScrollSelectedIndex();\n                        if (range.start > this.virtualScrollSelectedIndex || range.end < this.virtualScrollSelectedIndex) {\n                            this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex);\n                        }\n                    }\n                }\n            }, 1);\n            this.highlightOptionChanged = false;\n        }\n    }\n    handleSuggestionsChange() {\n        if (this._suggestions != null && this.loading) {\n            this.highlightOption = null;\n            if (this._suggestions.length) {\n                this.noResults = false;\n                this.show();\n                this.suggestionsUpdated = true;\n                if (this.autoHighlight) {\n                    this.highlightOption = this._suggestions[0];\n                }\n            }\n            else {\n                this.noResults = true;\n                if (this.showEmptyMessage) {\n                    this.show();\n                    this.suggestionsUpdated = true;\n                }\n                else {\n                    this.hide();\n                }\n            }\n            this.loading = false;\n        }\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                    break;\n                case 'group':\n                    this.groupTemplate = item.template;\n                    break;\n                case 'selectedItem':\n                    this.selectedItemTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'empty':\n                    this.emptyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                default:\n                    this.itemTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    updateVirtualScrollSelectedIndex() {\n        if (this.highlightOption && this.suggestions && this.suggestions.length) {\n            this.virtualScrollSelectedIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n        }\n    }\n    writeValue(value) {\n        this.value = value;\n        this.filled = this.value && this.value != '';\n        this.updateInputField();\n        this.cd.markForCheck();\n    }\n    getOptionGroupChildren(optionGroup) {\n        return this.optionGroupChildren ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;\n    }\n    getOptionGroupLabel(optionGroup) {\n        return this.optionGroupLabel ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel) : (optionGroup.label != undefined ? optionGroup.label : optionGroup);\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n    onInput(event) {\n        // When an input element with a placeholder is clicked, the onInput event is invoked in IE.\n        if (!this.inputKeyDown && DomHandler.isIE()) {\n            return;\n        }\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        let value = event.target.value;\n        if (!this.multiple && !this.forceSelection) {\n            this.onModelChange(value);\n        }\n        if (value.length === 0 && !this.multiple) {\n            this.hide();\n            this.onClear.emit(event);\n            this.onModelChange(value);\n        }\n        if (value.length >= this.minLength) {\n            this.timeout = setTimeout(() => {\n                this.search(event, value);\n            }, this.delay);\n        }\n        else {\n            this.hide();\n        }\n        this.updateFilledState();\n        this.inputKeyDown = false;\n    }\n    onInputClick(event) {\n        if (this.documentClickListener) {\n            this.inputClick = true;\n        }\n    }\n    search(event, query) {\n        //allow empty string but not undefined or null\n        if (query === undefined || query === null) {\n            return;\n        }\n        this.loading = true;\n        this.completeMethod.emit({\n            originalEvent: event,\n            query: query\n        });\n    }\n    selectItem(option, focus = true) {\n        if (this.forceSelectionUpdateModelTimeout) {\n            clearTimeout(this.forceSelectionUpdateModelTimeout);\n            this.forceSelectionUpdateModelTimeout = null;\n        }\n        if (this.multiple) {\n            this.multiInputEL.nativeElement.value = '';\n            this.value = this.value || [];\n            if (!this.isSelected(option) || !this.unique) {\n                this.value = [...this.value, option];\n                this.onModelChange(this.value);\n            }\n        }\n        else {\n            this.inputEL.nativeElement.value = this.resolveFieldData(option);\n            this.value = option;\n            this.onModelChange(this.value);\n        }\n        this.onSelect.emit(option);\n        this.updateFilledState();\n        if (focus) {\n            this.itemClicked = true;\n            this.focusInput();\n        }\n    }\n    show() {\n        if (this.multiInputEL || this.inputEL) {\n            let hasFocus = this.multiple ?\n                this.multiInputEL.nativeElement.ownerDocument.activeElement == this.multiInputEL.nativeElement :\n                this.inputEL.nativeElement.ownerDocument.activeElement == this.inputEL.nativeElement;\n            if (!this.overlayVisible && hasFocus) {\n                this.overlayVisible = true;\n            }\n        }\n    }\n    onOverlayAnimationStart(event) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.itemsWrapper = this.virtualScroll ? DomHandler.findSingle(this.overlay, '.cdk-virtual-scroll-viewport') : this.overlay;\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    ZIndexUtils.set('overlay', this.overlay, this.baseZIndex + this.config.zIndex.overlay);\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n                this.bindScrollListener();\n                this.onShow.emit(event);\n                break;\n            case 'void':\n                this.onOverlayHide();\n                break;\n        }\n    }\n    onOverlayAnimationEnd(event) {\n        switch (event.toState) {\n            case 'void':\n                if (this.autoZIndex) {\n                    ZIndexUtils.clear(event.element);\n                }\n                break;\n        }\n    }\n    onOverlayClick(event) {\n        this.overlayService.add({\n            originalEvent: event,\n            target: this.el.nativeElement\n        });\n    }\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n            if (!this.overlay.style.minWidth) {\n                this.overlay.style.minWidth = DomHandler.getWidth(this.el.nativeElement.children[0]) + 'px';\n            }\n        }\n    }\n    resolveFieldData(value) {\n        let data = this.field ? ObjectUtils.resolveFieldData(value, this.field) : value;\n        return data !== (null || undefined) ? data : '';\n    }\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n    alignOverlay() {\n        if (this.appendTo)\n            DomHandler.absolutePosition(this.overlay, (this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement));\n        else\n            DomHandler.relativePosition(this.overlay, (this.multiple ? this.multiContainerEL.nativeElement : this.inputEL.nativeElement));\n    }\n    hide() {\n        this.overlayVisible = false;\n        this.cd.markForCheck();\n    }\n    handleDropdownClick(event) {\n        if (!this.overlayVisible) {\n            this.focusInput();\n            let queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;\n            if (this.dropdownMode === 'blank')\n                this.search(event, '');\n            else if (this.dropdownMode === 'current')\n                this.search(event, queryValue);\n            this.onDropdownClick.emit({\n                originalEvent: event,\n                query: queryValue\n            });\n        }\n        else {\n            this.hide();\n        }\n    }\n    focusInput() {\n        if (this.multiple)\n            this.multiInputEL.nativeElement.focus();\n        else\n            this.inputEL.nativeElement.focus();\n    }\n    get emptyMessageLabel() {\n        return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    removeItem(item) {\n        let itemIndex = DomHandler.index(item);\n        let removedValue = this.value[itemIndex];\n        this.value = this.value.filter((val, i) => i != itemIndex);\n        this.onModelChange(this.value);\n        this.updateFilledState();\n        this.onUnselect.emit(removedValue);\n    }\n    onKeydown(event) {\n        if (this.overlayVisible) {\n            switch (event.which) {\n                //down\n                case 40:\n                    if (this.group) {\n                        let highlightItemIndex = this.findOptionGroupIndex(this.highlightOption, this.suggestions);\n                        if (highlightItemIndex !== -1) {\n                            let nextItemIndex = highlightItemIndex.itemIndex + 1;\n                            if (nextItemIndex < (this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex]).length)) {\n                                this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex])[nextItemIndex];\n                                this.highlightOptionChanged = true;\n                            }\n                            else if (this.suggestions[highlightItemIndex.groupIndex + 1]) {\n                                this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex + 1])[0];\n                                this.highlightOptionChanged = true;\n                            }\n                        }\n                        else {\n                            this.highlightOption = this.getOptionGroupChildren(this.suggestions[0])[0];\n                        }\n                    }\n                    else {\n                        let highlightItemIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n                        if (highlightItemIndex != -1) {\n                            var nextItemIndex = highlightItemIndex + 1;\n                            if (nextItemIndex != (this.suggestions.length)) {\n                                this.highlightOption = this.suggestions[nextItemIndex];\n                                this.highlightOptionChanged = true;\n                            }\n                        }\n                        else {\n                            this.highlightOption = this.suggestions[0];\n                        }\n                    }\n                    event.preventDefault();\n                    break;\n                //up\n                case 38:\n                    if (this.group) {\n                        let highlightItemIndex = this.findOptionGroupIndex(this.highlightOption, this.suggestions);\n                        if (highlightItemIndex !== -1) {\n                            let prevItemIndex = highlightItemIndex.itemIndex - 1;\n                            if (prevItemIndex >= 0) {\n                                this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex])[prevItemIndex];\n                                this.highlightOptionChanged = true;\n                            }\n                            else if (prevItemIndex < 0) {\n                                let prevGroup = this.suggestions[highlightItemIndex.groupIndex - 1];\n                                if (prevGroup) {\n                                    this.highlightOption = this.getOptionGroupChildren(prevGroup)[this.getOptionGroupChildren(prevGroup).length - 1];\n                                    this.highlightOptionChanged = true;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        let highlightItemIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n                        if (highlightItemIndex > 0) {\n                            let prevItemIndex = highlightItemIndex - 1;\n                            this.highlightOption = this.suggestions[prevItemIndex];\n                            this.highlightOptionChanged = true;\n                        }\n                    }\n                    event.preventDefault();\n                    break;\n                //enter\n                case 13:\n                    if (this.highlightOption) {\n                        this.selectItem(this.highlightOption);\n                        this.hide();\n                    }\n                    event.preventDefault();\n                    break;\n                //escape\n                case 27:\n                    this.hide();\n                    event.preventDefault();\n                    break;\n                //tab\n                case 9:\n                    if (this.highlightOption) {\n                        this.selectItem(this.highlightOption);\n                    }\n                    this.hide();\n                    break;\n            }\n        }\n        else {\n            if (event.which === 40 && this.suggestions) {\n                this.search(event, event.target.value);\n            }\n        }\n        if (this.multiple) {\n            switch (event.which) {\n                //backspace\n                case 8:\n                    if (this.value && this.value.length && !this.multiInputEL.nativeElement.value) {\n                        this.value = [...this.value];\n                        const removedValue = this.value.pop();\n                        this.onModelChange(this.value);\n                        this.updateFilledState();\n                        this.onUnselect.emit(removedValue);\n                    }\n                    break;\n            }\n        }\n        this.inputKeyDown = true;\n    }\n    onKeyup(event) {\n        this.onKeyUp.emit(event);\n    }\n    onInputFocus(event) {\n        if (!this.itemClicked && this.completeOnFocus) {\n            let queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;\n            this.search(event, queryValue);\n        }\n        this.focus = true;\n        this.onFocus.emit(event);\n        this.itemClicked = false;\n    }\n    onInputBlur(event) {\n        this.focus = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    onInputChange(event) {\n        if (this.forceSelection) {\n            let valid = false;\n            let inputValue = event.target.value.trim();\n            if (this.suggestions) {\n                for (let suggestion of this.suggestions) {\n                    let itemValue = this.field ? ObjectUtils.resolveFieldData(suggestion, this.field) : suggestion;\n                    if (itemValue && inputValue === itemValue.trim()) {\n                        valid = true;\n                        this.forceSelectionUpdateModelTimeout = setTimeout(() => {\n                            this.selectItem(suggestion, false);\n                        }, 250);\n                        break;\n                    }\n                }\n            }\n            if (!valid) {\n                if (this.multiple) {\n                    this.multiInputEL.nativeElement.value = '';\n                }\n                else {\n                    this.value = null;\n                    this.inputEL.nativeElement.value = '';\n                }\n                this.onClear.emit(event);\n                this.onModelChange(this.value);\n                this.updateFilledState();\n            }\n        }\n    }\n    onInputPaste(event) {\n        this.onKeydown(event);\n    }\n    isSelected(val) {\n        let selected = false;\n        if (this.value && this.value.length) {\n            for (let i = 0; i < this.value.length; i++) {\n                if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n                    selected = true;\n                    break;\n                }\n            }\n        }\n        return selected;\n    }\n    findOptionIndex(option, suggestions) {\n        let index = -1;\n        if (suggestions) {\n            for (let i = 0; i < suggestions.length; i++) {\n                if (ObjectUtils.equals(option, suggestions[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    findOptionGroupIndex(val, opts) {\n        let groupIndex, itemIndex;\n        if (opts) {\n            for (let i = 0; i < opts.length; i++) {\n                groupIndex = i;\n                itemIndex = this.findOptionIndex(val, this.getOptionGroupChildren(opts[i]));\n                if (itemIndex !== -1) {\n                    break;\n                }\n            }\n        }\n        if (itemIndex !== -1) {\n            return { groupIndex: groupIndex, itemIndex: itemIndex };\n        }\n        else {\n            return -1;\n        }\n    }\n    updateFilledState() {\n        if (this.multiple)\n            this.filled = (this.value && this.value.length) || (this.multiInputEL && this.multiInputEL.nativeElement && this.multiInputEL.nativeElement.value != '');\n        else\n            this.filled = (this.inputFieldValue && this.inputFieldValue != '') || (this.inputEL && this.inputEL.nativeElement && this.inputEL.nativeElement.value != '');\n        ;\n    }\n    updateInputField() {\n        let formattedValue = this.resolveFieldData(this.value);\n        this.inputFieldValue = formattedValue;\n        if (this.inputEL && this.inputEL.nativeElement) {\n            this.inputEL.nativeElement.value = formattedValue;\n        }\n        this.updateFilledState();\n    }\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', (event) => {\n                if (event.which === 3) {\n                    return;\n                }\n                if (!this.inputClick && !this.isDropdownClick(event)) {\n                    this.hide();\n                }\n                this.inputClick = false;\n                this.cd.markForCheck();\n            });\n        }\n    }\n    isDropdownClick(event) {\n        if (this.dropdown) {\n            let target = event.target;\n            return (target === this.dropdownButton.nativeElement || target.parentNode === this.dropdownButton.nativeElement);\n        }\n        else {\n            return false;\n        }\n    }\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n    onWindowResize() {\n        this.hide();\n    }\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerEL.nativeElement, () => {\n                if (this.overlayVisible) {\n                    this.hide();\n                }\n            });\n        }\n        this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n        this.overlay = null;\n        this.onHide.emit();\n    }\n    ngOnDestroy() {\n        if (this.forceSelectionUpdateModelTimeout) {\n            clearTimeout(this.forceSelectionUpdateModelTimeout);\n            this.forceSelectionUpdateModelTimeout = null;\n        }\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n        if (this.overlay) {\n            ZIndexUtils.clear(this.overlay);\n        }\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n}\nAutoComplete.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AutoComplete, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i0.IterableDiffers }, { token: i1.PrimeNGConfig }, { token: i1.OverlayService }], target: i0.ɵɵFactoryTarget.Component });\nAutoComplete.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: AutoComplete, selector: \"p-autoComplete\", inputs: { minLength: \"minLength\", delay: \"delay\", style: \"style\", panelStyle: \"panelStyle\", styleClass: \"styleClass\", panelStyleClass: \"panelStyleClass\", inputStyle: \"inputStyle\", inputId: \"inputId\", inputStyleClass: \"inputStyleClass\", placeholder: \"placeholder\", readonly: \"readonly\", disabled: \"disabled\", virtualScroll: \"virtualScroll\", itemSize: \"itemSize\", maxlength: \"maxlength\", name: \"name\", required: \"required\", size: \"size\", appendTo: \"appendTo\", autoHighlight: \"autoHighlight\", forceSelection: \"forceSelection\", type: \"type\", autoZIndex: \"autoZIndex\", baseZIndex: \"baseZIndex\", ariaLabel: \"ariaLabel\", dropdownAriaLabel: \"dropdownAriaLabel\", ariaLabelledBy: \"ariaLabelledBy\", dropdownIcon: \"dropdownIcon\", unique: \"unique\", group: \"group\", completeOnFocus: \"completeOnFocus\", field: \"field\", scrollHeight: \"scrollHeight\", dropdown: \"dropdown\", showEmptyMessage: \"showEmptyMessage\", dropdownMode: \"dropdownMode\", multiple: \"multiple\", tabindex: \"tabindex\", dataKey: \"dataKey\", emptyMessage: \"emptyMessage\", showTransitionOptions: \"showTransitionOptions\", hideTransitionOptions: \"hideTransitionOptions\", autofocus: \"autofocus\", autocomplete: \"autocomplete\", optionGroupChildren: \"optionGroupChildren\", optionGroupLabel: \"optionGroupLabel\", suggestions: \"suggestions\" }, outputs: { completeMethod: \"completeMethod\", onSelect: \"onSelect\", onUnselect: \"onUnselect\", onFocus: \"onFocus\", onBlur: \"onBlur\", onDropdownClick: \"onDropdownClick\", onClear: \"onClear\", onKeyUp: \"onKeyUp\", onShow: \"onShow\", onHide: \"onHide\" }, host: { properties: { \"class.p-inputwrapper-filled\": \"filled\", \"class.p-inputwrapper-focus\": \"(focus && !disabled) ||\\u00A0overlayVisible\" }, classAttribute: \"p-element p-inputwrapper\" }, providers: [AUTOCOMPLETE_VALUE_ACCESSOR], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"containerEL\", first: true, predicate: [\"container\"], descendants: true }, { propertyName: \"inputEL\", first: true, predicate: [\"in\"], descendants: true }, { propertyName: \"multiInputEL\", first: true, predicate: [\"multiIn\"], descendants: true }, { propertyName: \"multiContainerEL\", first: true, predicate: [\"multiContainer\"], descendants: true }, { propertyName: \"dropdownButton\", first: true, predicate: [\"ddBtn\"], descendants: true }, { propertyName: \"viewPort\", first: true, predicate: CdkVirtualScrollViewport, descendants: true }], ngImport: i0, template: `\n        <span #container [ngClass]=\"{'p-autocomplete p-component':true,'p-autocomplete-dd':dropdown,'p-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input *ngIf=\"!multiple\" #in [attr.type]=\"type\" [attr.id]=\"inputId\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [autocomplete]=\"autocomplete\" [attr.required]=\"required\" [attr.name]=\"name\"\n            class=\"p-autocomplete-input p-inputtext p-component\" [ngClass]=\"{'p-autocomplete-dd-input':dropdown,'p-disabled': disabled}\" [value]=\"inputFieldValue\" aria-autocomplete=\"list\" [attr.aria-controls]=\"listId\" role=\"searchbox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\"\n            (click)=\"onInputClick($event)\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\"\n            [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n            ><ul *ngIf=\"multiple\" #multiContainer class=\"p-autocomplete-multiple-container p-component p-inputtext\" [ngClass]=\"{'p-disabled':disabled,'p-focus':focus}\" (click)=\"multiIn.focus()\">\n                <li #token *ngFor=\"let val of value\" class=\"p-autocomplete-token\">\n                    <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: val}\"></ng-container>\n                    <span *ngIf=\"!selectedItemTemplate\" class=\"p-autocomplete-token-label\">{{resolveFieldData(val)}}</span>\n                    <span  class=\"p-autocomplete-token-icon pi pi-times-circle\" (click)=\"removeItem(token)\" *ngIf=\"!disabled && !readonly\"></span>\n                </li>\n                <li class=\"p-autocomplete-input-token\">\n                    <input #multiIn [attr.type]=\"type\" [attr.id]=\"inputId\" [disabled]=\"disabled\" [attr.placeholder]=\"(value&&value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" [attr.maxlength]=\"maxlength\" (input)=\"onInput($event)\"  (click)=\"onInputClick($event)\"\n                            (keydown)=\"onKeydown($event)\" [readonly]=\"readonly\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\" [autocomplete]=\"autocomplete\"\n                            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n                            aria-autocomplete=\"list\" [attr.aria-controls]=\"listId\" role=\"searchbox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\">\n                </li>\n            </ul>\n            <i *ngIf=\"loading\" class=\"p-autocomplete-loader pi pi-spinner pi-spin\"></i><button #ddBtn type=\"button\" pButton [icon]=\"dropdownIcon\" [attr.aria-label]=\"dropdownAriaLabel\" class=\"p-autocomplete-dropdown\" [disabled]=\"disabled\" pRipple\n                (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\" [attr.tabindex]=\"tabindex\"></button>\n            <div #panel *ngIf=\"overlayVisible\" (click)=\"onOverlayClick($event)\" [ngClass]=\"['p-autocomplete-panel p-component']\" [style.max-height]=\"virtualScroll ? 'auto' : scrollHeight\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\"\n                [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationEnd($event)\">\n                <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                <ul role=\"listbox\" [attr.id]=\"listId\" class=\"p-autocomplete-items\" [ngClass]=\"{'p-autocomplete-virtualscroll': virtualScroll}\">\n                    <ng-container *ngIf=\"group\">\n                        <ng-template ngFor let-optgroup [ngForOf]=\"suggestions\">\n                            <li class=\"p-autocomplete-item-group\">\n                                <span *ngIf=\"!groupTemplate\">{{getOptionGroupLabel(optgroup)||'empty'}}</span>\n                                <ng-container *ngTemplateOutlet=\"groupTemplate; context: {$implicit: optgroup}\"></ng-container>\n                            </li>\n                            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: getOptionGroupChildren(optgroup)}\"></ng-container>\n                        </ng-template>\n                    </ng-container>\n                    <ng-container *ngIf=\"!group\">\n                            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: suggestions}\"></ng-container>\n                    </ng-container>\n                    <ng-template #itemslist let-suggestionsToDisplay>\n                        <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                            <li role=\"option\" *ngFor=\"let option of suggestionsToDisplay; let idx = index\" class=\"p-autocomplete-item\" pRipple [ngClass]=\"{'p-highlight': (option === highlightOption)}\" [id]=\"highlightOption == option ? 'p-highlighted-option':''\" (click)=\"selectItem(option)\">\n                                <span *ngIf=\"!itemTemplate\">{{resolveFieldData(option)}}</span>\n                                <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: idx}\"></ng-container>\n                            </li>\n                        </ng-container>\n                        <ng-template #virtualScrollList>\n                            <cdk-virtual-scroll-viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && !noResults\">\n                                <ng-container *cdkVirtualFor=\"let option of suggestionsToDisplay; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">\n                                    <li role=\"option\" class=\"p-autocomplete-item\" pRipple [ngClass]=\"{'p-highlight': (option === highlightOption)}\" [ngStyle]=\"{'height': itemSize + 'px'}\" [id]=\"highlightOption == option ? 'p-highlighted-option':''\" (click)=\"selectItem(option)\">\n                                        <span *ngIf=\"!itemTemplate\">{{resolveFieldData(option)}}</span>\n                                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\n                                    </li>\n                                </ng-container>\n                            </cdk-virtual-scroll-viewport>\n                        </ng-template>\n                        <li *ngIf=\"noResults && showEmptyMessage\" class=\"p-autocomplete-empty-message\">\n                            <ng-container *ngIf=\"!emptyTemplate; else empty\">\n                                {{emptyMessageLabel}}\n                            </ng-container>\n                            <ng-container #empty *ngTemplateOutlet=\"emptyTemplate\"></ng-container>\n                        </li>\n                    </ng-template>\n                </ul>\n                <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n            </div>\n        </span>\n    `, isInline: true, styles: [\".p-autocomplete{display:inline-flex;position:relative}.p-autocomplete-loader{position:absolute;top:50%;margin-top:-.5rem}.p-autocomplete-dd .p-autocomplete-input{flex:1 1 auto;width:1%}.p-autocomplete-dd .p-autocomplete-input,.p-autocomplete-dd .p-autocomplete-multiple-container{border-top-right-radius:0;border-bottom-right-radius:0}.p-autocomplete-dd .p-autocomplete-dropdown{border-top-left-radius:0;border-bottom-left-radius:0}.p-autocomplete .p-autocomplete-panel{min-width:100%;top:0;left:0}.p-autocomplete-panel{position:absolute;overflow:auto}.p-autocomplete-items{margin:0;padding:0;list-style-type:none}.p-autocomplete-item{cursor:pointer;white-space:nowrap;position:relative;overflow:hidden}.p-autocomplete-multiple-container{margin:0;padding:0;list-style-type:none;cursor:text;overflow:hidden;display:flex;align-items:center;flex-wrap:wrap}.p-autocomplete-token{cursor:default;display:inline-flex;align-items:center;flex:0 0 auto}.p-autocomplete-token-icon{cursor:pointer}.p-autocomplete-input-token{flex:1 1 auto;display:inline-flex}.p-autocomplete-input-token input{border:0;outline:0 none;background-color:transparent;margin:0;padding:0;box-shadow:none;border-radius:0;width:100%}.p-fluid .p-autocomplete{display:flex}.p-fluid .p-autocomplete-dd .p-autocomplete-input{width:1%}\"], components: [{ type: i2.CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: [\"orientation\"], outputs: [\"scrolledIndexChange\"] }], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i4.ButtonDirective, selector: \"[pButton]\", inputs: [\"iconPos\", \"loadingIcon\", \"label\", \"icon\", \"loading\"] }, { type: i5.Ripple, selector: \"[pRipple]\" }, { type: i2.CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: [\"itemSize\", \"minBufferPx\", \"maxBufferPx\"] }, { type: i2.CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: [\"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplate\", \"cdkVirtualForTemplateCacheSize\"] }], animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({ opacity: 0, transform: 'scaleY(0.8)' }),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AutoComplete, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-autoComplete',\n                    template: `\n        <span #container [ngClass]=\"{'p-autocomplete p-component':true,'p-autocomplete-dd':dropdown,'p-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input *ngIf=\"!multiple\" #in [attr.type]=\"type\" [attr.id]=\"inputId\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [autocomplete]=\"autocomplete\" [attr.required]=\"required\" [attr.name]=\"name\"\n            class=\"p-autocomplete-input p-inputtext p-component\" [ngClass]=\"{'p-autocomplete-dd-input':dropdown,'p-disabled': disabled}\" [value]=\"inputFieldValue\" aria-autocomplete=\"list\" [attr.aria-controls]=\"listId\" role=\"searchbox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\"\n            (click)=\"onInputClick($event)\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\"\n            [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n            ><ul *ngIf=\"multiple\" #multiContainer class=\"p-autocomplete-multiple-container p-component p-inputtext\" [ngClass]=\"{'p-disabled':disabled,'p-focus':focus}\" (click)=\"multiIn.focus()\">\n                <li #token *ngFor=\"let val of value\" class=\"p-autocomplete-token\">\n                    <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: val}\"></ng-container>\n                    <span *ngIf=\"!selectedItemTemplate\" class=\"p-autocomplete-token-label\">{{resolveFieldData(val)}}</span>\n                    <span  class=\"p-autocomplete-token-icon pi pi-times-circle\" (click)=\"removeItem(token)\" *ngIf=\"!disabled && !readonly\"></span>\n                </li>\n                <li class=\"p-autocomplete-input-token\">\n                    <input #multiIn [attr.type]=\"type\" [attr.id]=\"inputId\" [disabled]=\"disabled\" [attr.placeholder]=\"(value&&value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" [attr.maxlength]=\"maxlength\" (input)=\"onInput($event)\"  (click)=\"onInputClick($event)\"\n                            (keydown)=\"onKeydown($event)\" [readonly]=\"readonly\" (keyup)=\"onKeyup($event)\" [attr.autofocus]=\"autofocus\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" (change)=\"onInputChange($event)\" (paste)=\"onInputPaste($event)\" [autocomplete]=\"autocomplete\"\n                            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-required]=\"required\"\n                            aria-autocomplete=\"list\" [attr.aria-controls]=\"listId\" role=\"searchbox\" [attr.aria-expanded]=\"overlayVisible\" aria-haspopup=\"true\" [attr.aria-activedescendant]=\"'p-highlighted-option'\">\n                </li>\n            </ul>\n            <i *ngIf=\"loading\" class=\"p-autocomplete-loader pi pi-spinner pi-spin\"></i><button #ddBtn type=\"button\" pButton [icon]=\"dropdownIcon\" [attr.aria-label]=\"dropdownAriaLabel\" class=\"p-autocomplete-dropdown\" [disabled]=\"disabled\" pRipple\n                (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\" [attr.tabindex]=\"tabindex\"></button>\n            <div #panel *ngIf=\"overlayVisible\" (click)=\"onOverlayClick($event)\" [ngClass]=\"['p-autocomplete-panel p-component']\" [style.max-height]=\"virtualScroll ? 'auto' : scrollHeight\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\"\n                [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (@overlayAnimation.done)=\"onOverlayAnimationEnd($event)\">\n                <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                <ul role=\"listbox\" [attr.id]=\"listId\" class=\"p-autocomplete-items\" [ngClass]=\"{'p-autocomplete-virtualscroll': virtualScroll}\">\n                    <ng-container *ngIf=\"group\">\n                        <ng-template ngFor let-optgroup [ngForOf]=\"suggestions\">\n                            <li class=\"p-autocomplete-item-group\">\n                                <span *ngIf=\"!groupTemplate\">{{getOptionGroupLabel(optgroup)||'empty'}}</span>\n                                <ng-container *ngTemplateOutlet=\"groupTemplate; context: {$implicit: optgroup}\"></ng-container>\n                            </li>\n                            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: getOptionGroupChildren(optgroup)}\"></ng-container>\n                        </ng-template>\n                    </ng-container>\n                    <ng-container *ngIf=\"!group\">\n                            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: suggestions}\"></ng-container>\n                    </ng-container>\n                    <ng-template #itemslist let-suggestionsToDisplay>\n                        <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                            <li role=\"option\" *ngFor=\"let option of suggestionsToDisplay; let idx = index\" class=\"p-autocomplete-item\" pRipple [ngClass]=\"{'p-highlight': (option === highlightOption)}\" [id]=\"highlightOption == option ? 'p-highlighted-option':''\" (click)=\"selectItem(option)\">\n                                <span *ngIf=\"!itemTemplate\">{{resolveFieldData(option)}}</span>\n                                <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: idx}\"></ng-container>\n                            </li>\n                        </ng-container>\n                        <ng-template #virtualScrollList>\n                            <cdk-virtual-scroll-viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && !noResults\">\n                                <ng-container *cdkVirtualFor=\"let option of suggestionsToDisplay; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">\n                                    <li role=\"option\" class=\"p-autocomplete-item\" pRipple [ngClass]=\"{'p-highlight': (option === highlightOption)}\" [ngStyle]=\"{'height': itemSize + 'px'}\" [id]=\"highlightOption == option ? 'p-highlighted-option':''\" (click)=\"selectItem(option)\">\n                                        <span *ngIf=\"!itemTemplate\">{{resolveFieldData(option)}}</span>\n                                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option, index: i}\"></ng-container>\n                                    </li>\n                                </ng-container>\n                            </cdk-virtual-scroll-viewport>\n                        </ng-template>\n                        <li *ngIf=\"noResults && showEmptyMessage\" class=\"p-autocomplete-empty-message\">\n                            <ng-container *ngIf=\"!emptyTemplate; else empty\">\n                                {{emptyMessageLabel}}\n                            </ng-container>\n                            <ng-container #empty *ngTemplateOutlet=\"emptyTemplate\"></ng-container>\n                        </li>\n                    </ng-template>\n                </ul>\n                <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n            </div>\n        </span>\n    `,\n                    animations: [\n                        trigger('overlayAnimation', [\n                            transition(':enter', [\n                                style({ opacity: 0, transform: 'scaleY(0.8)' }),\n                                animate('{{showTransitionParams}}')\n                            ]),\n                            transition(':leave', [\n                                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n                            ])\n                        ])\n                    ],\n                    host: {\n                        'class': 'p-element p-inputwrapper',\n                        '[class.p-inputwrapper-filled]': 'filled',\n                        '[class.p-inputwrapper-focus]': '(focus && !disabled) || overlayVisible'\n                    },\n                    providers: [AUTOCOMPLETE_VALUE_ACCESSOR],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    styleUrls: ['./autocomplete.css']\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.IterableDiffers }, { type: i1.PrimeNGConfig }, { type: i1.OverlayService }]; }, propDecorators: { minLength: [{\n                type: Input\n            }], delay: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], panelStyle: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], panelStyleClass: [{\n                type: Input\n            }], inputStyle: [{\n                type: Input\n            }], inputId: [{\n                type: Input\n            }], inputStyleClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], virtualScroll: [{\n                type: Input\n            }], itemSize: [{\n                type: Input\n            }], maxlength: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], appendTo: [{\n                type: Input\n            }], autoHighlight: [{\n                type: Input\n            }], forceSelection: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], autoZIndex: [{\n                type: Input\n            }], baseZIndex: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], dropdownAriaLabel: [{\n                type: Input\n            }], ariaLabelledBy: [{\n                type: Input\n            }], dropdownIcon: [{\n                type: Input\n            }], unique: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], completeOnFocus: [{\n                type: Input\n            }], completeMethod: [{\n                type: Output\n            }], onSelect: [{\n                type: Output\n            }], onUnselect: [{\n                type: Output\n            }], onFocus: [{\n                type: Output\n            }], onBlur: [{\n                type: Output\n            }], onDropdownClick: [{\n                type: Output\n            }], onClear: [{\n                type: Output\n            }], onKeyUp: [{\n                type: Output\n            }], onShow: [{\n                type: Output\n            }], onHide: [{\n                type: Output\n            }], field: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], dropdown: [{\n                type: Input\n            }], showEmptyMessage: [{\n                type: Input\n            }], dropdownMode: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], tabindex: [{\n                type: Input\n            }], dataKey: [{\n                type: Input\n            }], emptyMessage: [{\n                type: Input\n            }], showTransitionOptions: [{\n                type: Input\n            }], hideTransitionOptions: [{\n                type: Input\n            }], autofocus: [{\n                type: Input\n            }], autocomplete: [{\n                type: Input\n            }], optionGroupChildren: [{\n                type: Input\n            }], optionGroupLabel: [{\n                type: Input\n            }], containerEL: [{\n                type: ViewChild,\n                args: ['container']\n            }], inputEL: [{\n                type: ViewChild,\n                args: ['in']\n            }], multiInputEL: [{\n                type: ViewChild,\n                args: ['multiIn']\n            }], multiContainerEL: [{\n                type: ViewChild,\n                args: ['multiContainer']\n            }], dropdownButton: [{\n                type: ViewChild,\n                args: ['ddBtn']\n            }], viewPort: [{\n                type: ViewChild,\n                args: [CdkVirtualScrollViewport]\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }], suggestions: [{\n                type: Input\n            }] } });\nclass AutoCompleteModule {\n}\nAutoCompleteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AutoCompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAutoCompleteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AutoCompleteModule, declarations: [AutoComplete], imports: [CommonModule, InputTextModule, ButtonModule, SharedModule, RippleModule, ScrollingModule], exports: [AutoComplete, SharedModule, ScrollingModule] });\nAutoCompleteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AutoCompleteModule, imports: [[CommonModule, InputTextModule, ButtonModule, SharedModule, RippleModule, ScrollingModule], SharedModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AutoCompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, InputTextModule, ButtonModule, SharedModule, RippleModule, ScrollingModule],\n                    exports: [AutoComplete, SharedModule, ScrollingModule],\n                    declarations: [AutoComplete]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_VALUE_ACCESSOR, AutoComplete, AutoCompleteModule };\n","import { animate, animation, query, sequence, stagger, style, transition, trigger } from '@angular/animations';\r\n\r\nexport const SidebarOpenAnimation = animation([\r\n  style({ left: '-{{menuWidth}}' }),\r\n  query('.form-group', [style({ transform: 'translateX(-{{menuWidth}})' })]),\r\n  sequence([\r\n    animate('200ms', style({ left: '0' })),\r\n    query('.form-group', [stagger(50, [animate('{{animationStyle}}', style({ transform: 'none' }))])]),\r\n  ]),\r\n]);\r\n\r\nexport const SidebarCloseAnimation = animation([\r\n  style({ left: '0' }),\r\n  query('.form-group', [style({ transform: 'none' })]),\r\n  sequence([\r\n    query('.form-group', [\r\n      stagger(-50, [animate('{{animationStyle}}', style({ transform: 'translateX(-{{menuWidth}})' }))]),\r\n    ]),\r\n    animate('200ms', style({ left: '-{{menuWidth}}' })),\r\n  ]),\r\n]);\r\n\r\nexport const slideInOutAnimation = [\r\n  trigger('inOutAnimation', [\r\n    transition(':enter', [style({ opacity: 0 }), animate('500ms ease-in', style({ opacity: 1 }))]),\r\n    transition(':leave', [style({ opacity: 1 }), animate('300ms ease-out', style({ opacity: 0 }))]),\r\n  ]),\r\n];\r\n"]}